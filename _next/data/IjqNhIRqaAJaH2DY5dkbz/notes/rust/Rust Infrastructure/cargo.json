{"pageProps":{"noteKey":["rust","Rust Infrastructure","cargo"],"note":{"title":"Rust Package Management","date":"2022-03-03","content":"\n<h2>Cargo</h2>\n<h3>Generate Documentation</h3>\n<p><code>Cargo</code> is able to generate documentation from all the doc comments in crate. To do that run:</p>\n<pre><code class=\"hljs language-bash\">cargo doc --open\n</code></pre>\n<h2>Profiles</h2>\n<p><code>release profiles</code> are predefined and customizable profiles with different configurations that allow a programmer to have more control over various options for compiling code.</p>\n<ul>\n  <li><code>dev</code> profile <code>cargo</code> uses when you run <code>cargo build</code></li>\n  <li><code>release</code> profile <code>cargo</code> uses when you run <code>cargo build --release</code></li>\n</ul>\n<p>\n  Cargo has default settings for each of the profiles that apply when there aren’t any <code>[profile.*]</code> sections in the project’s <code>Cargo.toml</code> file.\n  By adding <code>[profile.*]</code> sections for any profile you want to customize, you can override any subset of the default settings.\n</p>\n<pre><code class=\"hljs language-toml\"><span class=\"hljs-section\">[profile.dev]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>The <code>opt-level</code> setting controls the number of optimizations Rust will apply to your code, with a range of 0 to 3.</p>\n<h2>Build And Release</h2>\n<p>To build Rust code use following command:</p>\n<pre><code class=\"hljs language-bash\">cargo build &#x3C;options>\n</code></pre>\n<p>Here are some of the useful options, which could be used with build command:</p>\n<ul>\n  <li><code>--lib</code> build package's library code</li>\n  <li>\n    <code>--bins</code> build package's executable binaries. Also it is possible to specify particular\n    binaries with <code>--bin &#x3C;name></code> option\n  </li>\n  <li><code>--examples</code> build all examples</li>\n  <li><code>--target &#x3C;name></code> build for specified target architecture</li>\n  <li><code>--release</code> build in release mode with all optimisations</li>\n  <li><code>--target-dit</code> specify directory to put build outputs</li>\n  <li><code>--verbose</code> log all details during build process</li>\n  <li><code>--quite</code> don't log any details during build process</li>\n  <li><code>--message-format</code> specifies format of outputting build logs</li>\n  <li><code>--jobs</code> specifies amount of parallel processes of build</li>\n  <li>``</li>\n</ul>\n<h2>Publishing</h2>\n<p>\n  To publish modules into <code>crates.io</code> need at first to register on it with <code>github</code> account.\n  On the second step need to generate new API token. It is possible to do on <code>https://crates.io/settings/tokens</code>\n  page. Pressing <code>New Token</code> button, system will ask for a name of a new token and after will\n  return freshly generated token.\n</p>\n<p>\n  To use it run <code>cargo login &#x3C;api-token></code> in the terminal or CI. Then token will be stored inside of\n  <code>~/.cargo/credentials</code>.\n</p>\n<p>\n  To be eligible for publish on <code>crates.io</code>, package should have a unique name, have a description\n  and <a href=\"https://spdx.org/licenses/\">license</a>.\n  It can be specified inside of <code>Cargo.toml</code> file:\n</p>\n<pre><code class=\"hljs language-toml\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"guessing_game\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2022\"</span>\n<span class=\"hljs-attr\">description</span> = <span class=\"hljs-string\">\"some package description\"</span>\n<span class=\"hljs-attr\">license</span> = <span class=\"hljs-string\">\"MIT\"</span>\n</code></pre>\n<p>\n  After all metadata is set correctly run <code>cargo publish</code>. This will publish the package to the\n  <code>crates.io</code>.\n</p>\n<p>\n  Published packages could not be edited or removed. This is made to ensure that all code, using this\n  package will be functional in future. But it is pussible to mark package as depricated by\n  <code>cargo yank --vers 1.0.1</code> so future projects will not use it. <code>cargo yank --vers 1.0.1 --undo</code> will\n  do the opposite.\n</p>\n<p>\n  There is no limitation for publishing new version though. To do that required to change <code>version</code>\n  in <code>Cargo.toml</code> file.\n</p>\n<h2>References</h2>\n<ul>\n  <li><a href=\"https://doc.rust-lang.org/cargo/commands/cargo-build.html\">cargo build documentation</a></li>\n</ul>\n"}},"__N_SSG":true}