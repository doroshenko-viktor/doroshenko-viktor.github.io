{"pageProps":{"noteKey":["javascript","Type Script","decorators"],"note":{"title":"TypeScript Decorators","date":"2022-07-19","content":"\n<p>\n  Decorator is a function, which wraps other entity, like class, property, method, accessors or\n  parameter and extending it's behavior.\n</p>\n<p>To enable decorators support TypeScript need to add following in project's <code>tsconfig.json</code>:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"compilerOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-comment\">// ...</span>\n        <span class=\"hljs-attr\">\"experimentalDecorators\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span>\n    <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Class Decorators</h2>\n<p>\n  This type of decorators is applied directly on classes. It can intercept class constructor.\n  This type of decorator is called in time of class declaration and not in time of class\n  instantiation.\n</p>\n<p>For example, decorator, which makes instance of the class sealed:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sealed</span>(<span class=\"hljs-params\">constructor: <span class=\"hljs-built_in\">Function</span></span>) {\n  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">seal</span>(constructor);\n  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">seal</span>(constructor.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);\n}\n</code></pre>\n<p>Or class decorator can intercept constructor and return inherited class instead:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> entity = &#x3C;T <span class=\"hljs-keyword\">extends</span> { <span class=\"hljs-keyword\">new</span> (...<span class=\"hljs-attr\">args</span>: <span class=\"hljs-built_in\">any</span>[]): {} }><span class=\"hljs-function\">(<span class=\"hljs-params\">target: T</span>) =></span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">extends</span> target {\n    <span class=\"hljs-keyword\">public</span> id = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>();\n    <span class=\"hljs-keyword\">public</span> createDate = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();\n  };\n};\n</code></pre>\n<p>Here, when using <code>@entity</code> on some class it will add random id and creation date as current date:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-meta\">@entity</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestClass</span> {\n  <span class=\"hljs-keyword\">public</span> field = <span class=\"hljs-string\">\"value\"</span>;\n}\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">\"class decorator tests\"</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">\"should freeze instance of TestClass\"</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> i1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestClass</span>();\n    <span class=\"hljs-title function_\">expect</span>((i1 <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">any</span>).<span class=\"hljs-property\">createDate</span>).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n});\n</code></pre>\n<p>\n  Note, that such decorator can't change typescript class, so we can achieve these additional\n  fields by casting the object to <code>any</code>.\n</p>\n<h2>Property Decorators</h2>\n<p>Following decorator on class field will overwrite <code>get</code> accessor:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ObjectKey</span>&#x3C;T> = keyof T;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> overwrite&#x3C;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Object</span>>(\n  <span class=\"hljs-attr\">target</span>: T,\n  <span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">symbol</span>\n): <span class=\"hljs-built_in\">void</span> {\n  <span class=\"hljs-keyword\">const</span> objectKey = key <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">ObjectKey</span>&#x3C;<span class=\"hljs-keyword\">typeof</span> target>;\n  <span class=\"hljs-keyword\">const</span> field = target[objectKey];\n\n  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(target, objectKey, {\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-string\">\"overwritten\"</span>, <span class=\"hljs-comment\">// now accessing decorated field will always return `overwritten` value</span>\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\">() =></span> {}, <span class=\"hljs-comment\">// invoke set now will not make any change to the field</span>\n    <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">false</span>,\n  });\n}\n</code></pre>\n<h2>Method Decorators</h2>\n<p>\n  This type of decorator can be used only on class methods. It receives target of type <code>Object</code> - object, on which this method is defined, key of type <code>string | symbol</code>, which is a method name\n  and descriptor of type <code>PropertyDescriptor</code>.\n</p>\n<p>\n  For example, let's create decorator, which will print to console execution time of decorated\n  method:\n</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">bench</span>: <span class=\"hljs-title class_\">MethodDecorator</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  target,\n  key,\n  descriptor: PropertyDescriptor\n</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">original</span>: <span class=\"hljs-title class_\">Function</span> = descriptor.<span class=\"hljs-property\">value</span>;\n  <span class=\"hljs-keyword\">if</span> (original == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> descriptor;\n\n  descriptor.<span class=\"hljs-property\">value</span> = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...args: <span class=\"hljs-built_in\">any</span>[]</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`method <span class=\"hljs-subst\">${key.toString()}</span> starting to execute`</span>);\n\n    <span class=\"hljs-keyword\">const</span> start = performance.<span class=\"hljs-title function_\">now</span>();\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> original.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, ...args);\n    <span class=\"hljs-keyword\">const</span> end = performance.<span class=\"hljs-title function_\">now</span>();\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`method <span class=\"hljs-subst\">${key.toString()}</span> execution time: <span class=\"hljs-subst\">${end - start}</span>`</span>);\n\n    <span class=\"hljs-keyword\">return</span> result;\n  };\n\n  <span class=\"hljs-keyword\">return</span> descriptor;\n};\n</code></pre>\n<h2>Decorator Factories</h2>\n<p>\n  Decorator factory is a function, which receives some arbitrary number of parameters and eventually\n  returns a decorator:\n</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">decoratorFactory</span>(<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">any</span></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">target</span>) =></span> {\n    <span class=\"hljs-comment\">// ...</span>\n  };\n}\n</code></pre>\n<h2>References</h2>\n<ul>\n  <li><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html#introduction\">https://www.typescriptlang.org/docs/handbook/decorators.html#introduction</a></li>\n</ul>\n"}},"__N_SSG":true}