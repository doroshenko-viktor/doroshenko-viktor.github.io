{"pageProps":{"noteKey":["algorithms","trees"],"note":{"title":"Trees","date":"2022-05-29","content":"\n<p>\n  <code>Trees</code> are a special kind of <code>graphs</code> with some restrictions applied. Trees should have a starting <code>root</code>.\n  This root node may have links to set of multiple different child nodes. Nodes, which are linked by the same node\n  called <code>child nodes</code>. If some set of these child nodes are linked by the same <code>parent node</code>, they are called <code>siblings</code>.\n  Nodes, which don't have children are called <code>leafs</code>.\n</p>\n<p>\n  Parent-child relations in trees are hierarchial. Unlike <code>graphs</code> single <code>child</code> node may not be linked by multiple\n  <code>parent</code> nodes.\n</p>\n<p>\n  <img src=\"/_images/trees-1.png\" alt=\"Tree example\">\n</p>\n<p>\n  In this example node <code>1</code> is a <code>root</code> and <code>parent</code> for nodes <code>2</code> and <code>3</code>, which are <code>siblings</code>, relative to node <code>1</code>.\n  In it's turn node <code>2</code> is a <code>parent</code> for <code>4</code> and <code>5</code>, which are also siblings. And node <code>3</code> is a parent for <code>6</code>, <code>7</code>, <code>8</code>,\n  which are siblings relative to <code>3</code>. By analogy node <code>4</code> is a parent for <code>9</code> and node <code>6</code> is a parent for <code>10</code>. Nodes\n  <code>7</code>, <code>8</code>, <code>9</code>, <code>10</code> are leaves, because they don't have children.\n</p>\n<p>When tree has many levels, it is possible to separate it to multiple smaller subtrees with roots in different parent nodes.</p>\n<p>\n  <img src=\"/_images/trees-2.png\" alt=\"Subtrees example\">\n</p>\n<p>Good to keep this fact in mind when creating algorithms on trees, because this separation is a good fit for recursive algorithms.</p>\n<h2>Depth And Height</h2>\n<p>\n  <code>Depth</code> is a parameter of node, which answers the question <code>How far this node is placed from the root</code>. In other words, how\n  many links we should follow to walk from the <code>root</code> to the required node.\n</p>\n<p>\n  <code>Height</code> shows the longest path from the node to it's most far leaf. Taking <code>height</code> of the root node will give also height\n  of the whole tree. This will be the longest path to follow in the tree.\n</p>\n<h2>Binary Search Tree</h2>\n<h2>Balanced Trees</h2>\n<p>\n  The tree is <code>balanced</code> if any two sibling subtrees have a difference in their height no more than one level. In other case\n  tree is considered <code>unbalanced</code>.\n</p>\n<h2>Next</h2>\n<p>\n  <a href=\"https://medium.com/basecs/busying-oneself-with-b-trees-78bbf10522e7\">https://medium.com/basecs/busying-oneself-with-b-trees-78bbf10522e7</a>\n  <a href=\"https://medium.com/basecs/painting-nodes-black-with-red-black-trees-60eacb2be9a5\">https://medium.com/basecs/painting-nodes-black-with-red-black-trees-60eacb2be9a5</a>\n  <a href=\"https://medium.com/basecs/the-little-avl-tree-that-could-86a3cae410c7\">https://medium.com/basecs/the-little-avl-tree-that-could-86a3cae410c7</a>\n  <a href=\"https://medium.com/basecs/trying-to-understand-tries-3ec6bede0014\">https://medium.com/basecs/trying-to-understand-tries-3ec6bede0014</a>\n  <a href=\"https://medium.com/basecs/leaf-it-up-to-binary-trees-11001aaf746d\">https://medium.com/basecs/leaf-it-up-to-binary-trees-11001aaf746d</a>\n</p>\n"}},"__N_SSG":true}