{"pageProps":{"noteKey":["csharp","cli-app"],"note":{"title":"Creating C# CLI App","date":"2022-03-27","content":"\n<h2>Initial Setup</h2>\n<p>\n  We will create a simple <code>c#</code> application which will be able to run conventional <code>CLI</code> interface with mandatory arguments and optional parameters. Our app will have simple logging, provided by <code>Serilog</code>\n  and <code>CQRS</code> pattern with <code>MediatR</code>.\n</p>\n<p>At the beginning we need to create a new solution, <code>CLI</code> and <code>Business</code> projects:</p>\n<pre><code class=\"hljs language-bash\">dotnet new sln -o charp-cli-app\n<span class=\"hljs-built_in\">cd</span> charp-cli-app\ndotnet new console -o CLI\ndotnet new console -o Business\ndotnet sln add CLI Business\n</code></pre>\n<p>\n  Our project will have simple business and presentation layering, where <code>Business</code> is a stable component\n  and presentational <code>CLI</code> project will depend on it. This means, we need to create references between projects:\n</p>\n<pre><code class=\"hljs language-bash\">dotnet add ./CLI reference Business\n</code></pre>\n<p>This will create a reference inside <code>CLI/CLI.csproj</code> file:</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ItemGroup</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProjectReference</span> <span class=\"hljs-attr\">Include</span>=<span class=\"hljs-string\">\"..\\Business\\Business.csproj\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ItemGroup</span>></span>\n</code></pre>\n<p>We created solution and two empty projects with proper references. Now we need to add external dependencies for our project.</p>\n<p>In <code>CLI</code> project add:</p>\n<ul>\n  <li><code>Serilog</code> library for logging</li>\n  <li><code>Serilog.Sinks.Console</code> allows to configure logging into terminal</li>\n  <li><code>Serilog.Extensions.Logging</code> - it allows to use Serilog with standard <code>ILogger&#x3C;T></code> interface</li>\n  <li><code>Microsoft.Extensions.CommandLineUtils</code> NuGet to easily parse arguments and create commands</li>\n</ul>\n<pre><code class=\"hljs language-bash\">dotnet add ./CLI package Serilog -v &#x3C;version>\ndotnet add ./CLI package Serilog.Sinks.Console -v &#x3C;version>\ndotnet add ./CLI package Serilog.Extensions.Logging -v &#x3C;version>\ndotnet add ./CLI package Microsoft.Extensions.CommandLineUtils -v &#x3C;version>\n</code></pre>\n<p>This will create in <code>CLI/CLI.csproj</code> file following lines:</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ItemGroup</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">PackageReference</span> <span class=\"hljs-attr\">Include</span>=<span class=\"hljs-string\">\"Microsoft.Extensions.CommandLineUtils\"</span> <span class=\"hljs-attr\">Version</span>=<span class=\"hljs-string\">\"&#x3C;version>\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">PackageReference</span> <span class=\"hljs-attr\">Include</span>=<span class=\"hljs-string\">\"Serilog\"</span> <span class=\"hljs-attr\">Version</span>=<span class=\"hljs-string\">\"&#x3C;version>\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">PackageReference</span> <span class=\"hljs-attr\">Include</span>=<span class=\"hljs-string\">\"Serilog.Extensions.Logging\"</span> <span class=\"hljs-attr\">Version</span>=<span class=\"hljs-string\">\"&#x3C;version>\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">PackageReference</span> <span class=\"hljs-attr\">Include</span>=<span class=\"hljs-string\">\"Serilog.Sinks.Console\"</span> <span class=\"hljs-attr\">Version</span>=<span class=\"hljs-string\">\"&#x3C;version>\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ItemGroup</span>></span>\n</code></pre>\n<p>Then add to <code>Business</code>:</p>\n<ul>\n  <li><code>MediatR</code> - simple request/response library</li>\n  <li><code>Microsoft.Extensions.Logging</code> - contains standard logging functionality, which we will use for <code>DI</code></li>\n</ul>\n<pre><code class=\"hljs language-bash\">dotnet add ./Business package MediatR -v &#x3C;version>\ndotnet add ./Business Microsoft.Extensions.Logging -v &#x3C;version>\n</code></pre>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ItemGroup</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">PackageReference</span> <span class=\"hljs-attr\">Include</span>=<span class=\"hljs-string\">\"MediatR\"</span> <span class=\"hljs-attr\">Version</span>=<span class=\"hljs-string\">\"&#x3C;version>\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">PackageReference</span> <span class=\"hljs-attr\">Include</span>=<span class=\"hljs-string\">\"Microsoft.Extensions.Logging\"</span> <span class=\"hljs-attr\">Version</span>=<span class=\"hljs-string\">\"&#x3C;version>\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ItemGroup</span>></span>\n</code></pre>\n<p><em>Need to specify particular version of packages instead of , because it is always a subject to change</em></p>\n<h2>Implementing Business</h2>\n<p>\n  Unlike real life in our study cli app business does not have a big value. To imitate it we simply will\n  use basic mathematical operations.\n</p>\n<p>To be more conventional and a little bit follow TDD, create new test project:</p>\n<pre><code class=\"hljs language-bash\">dotnet new xunit -o Tests\ndotnet add ./Tests reference ./Business\ndotnet sln add Tests\n</code></pre>\n<p>And create new class <code>CalculatorTests</code> in tests project and create simple tests for our business:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Tests</span>;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CalculatorTests</span>\n{\n    [<span class=\"hljs-meta\">Theory</span>]\n    [<span class=\"hljs-meta\">InlineData(2, 1, 3)</span>]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ShouldAddTwoValues__WhenNoOverflow</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y, <span class=\"hljs-built_in\">int</span> expectedResult</span>)</span>\n    {\n        <span class=\"hljs-comment\">// arrange</span>\n        <span class=\"hljs-keyword\">var</span> calculator = <span class=\"hljs-keyword\">new</span> Calculator();\n        <span class=\"hljs-comment\">// act</span>\n        <span class=\"hljs-keyword\">var</span> result = calculator.Add(x, y);\n        <span class=\"hljs-comment\">// assert</span>\n        result.Should().Be(expectedResult);\n    }\n}\n</code></pre>\n<p>In business project create two interfaces. First <code>ICalculator</code>:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Business</span>;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ICalculator</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Add</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>)</span>;\n}\n</code></pre>\n<p>\n  And second <code>IFileService</code> - it will be used if optional parameter to save result into file will be\n  passed:\n</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Business.Interfaces</span>;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">IFileService</span>\n{\n    <span class=\"hljs-function\">Task <span class=\"hljs-title\">SaveToFileAsync</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> path, <span class=\"hljs-built_in\">string</span> content</span>)</span>;\n}\n</code></pre>\n<p>Then create implementation in <code>Business</code>:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Business</span>;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Calculator</span> : <span class=\"hljs-title\">ICalculator</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Add</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>)</span>\n    {\n        <span class=\"hljs-keyword\">return</span> x + y;\n    }\n}\n</code></pre>\n<p>This is a quite naive implementation, but it's enough for our purpose of building CLI application ðŸ˜œ</p>\n<p>\n  Implementation of <code>IFileService</code> we'll create in <code>CLI/Services</code> because it is not strictly related to\n  our business, but to infrastructure:\n</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">CLI.Services</span>;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileService</span> : <span class=\"hljs-title\">IFileService</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">async</span> Task <span class=\"hljs-title\">SaveToFileAsync</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> path, <span class=\"hljs-built_in\">string</span> content</span>)</span>\n    {\n        <span class=\"hljs-keyword\">if</span> (File.Exists(path))\n        {\n            <span class=\"hljs-keyword\">await</span> File.AppendAllTextAsync(path, content, ct);\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-keyword\">await</span> File.WriteAllTextAsync(path, content, ct);\n        }\n    }\n}\n</code></pre>\n<p>Now as our tests pass, we can move to implementation of our <code>CLI</code>.</p>\n<h2>CLI Project Configuration</h2>\n<p>\n  At the beginning we have to create <code>DI</code> container and register our dependencies.\n  To do it, write following in <code>CLI/Program.cs</code> file:\n</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">var</span> serviceProvider = <span class=\"hljs-keyword\">new</span> ServiceCollection()\n    .AddSingleton&#x3C;ICalculator, Calculator>()\n    .AddSingleton&#x3C;IFileService, FileService>()\n    .BuildServiceProvider();\n</code></pre>\n<p><strong>Configuring Logging:</strong></p>\n<p>Create file <code>ConfigurationExtensions.cs</code> file in <code>CLI</code> project with content:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">CLI</span>;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConfigurationExtensions</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> IServiceCollection <span class=\"hljs-title\">AddSerilogLogging</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span> IServiceCollection services</span>)</span>\n    {\n        <span class=\"hljs-keyword\">var</span> logger = <span class=\"hljs-keyword\">new</span> LoggerConfiguration()\n            .WriteTo.Console()\n            .CreateLogger();\n\n        services.AddLogging(builder =>\n        {\n            builder.SetMinimumLevel(LogLevel.Trace);\n            builder.AddSerilog(logger, dispose: <span class=\"hljs-literal\">true</span>);\n        });\n\n        <span class=\"hljs-keyword\">return</span> services;\n    }\n}\n</code></pre>\n<p>\n  This will setup logging with <code>Serilog</code> to console and allows to use loggers with dependency injection.\n  Now we can use this extension on our <code>DI</code> container in <code>Program.cs</code>:\n</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">var</span> serviceProvider = <span class=\"hljs-keyword\">new</span> ServiceCollection()\n    .AddSerilogLogging()\n    .AddSingleton&#x3C;ICalculator, Calculator>()\n    .AddSingleton&#x3C;IFileService, FileService>()\n    .BuildServiceProvider();\n</code></pre>\n<p><strong>MediatR:</strong></p>\n<p>Now creating <code>MediatR</code> command for adding numbers in <code>Business/Requests</code> folder:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Business.Requests</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">record</span> <span class=\"hljs-title\">AddNumbersCommand</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> X, <span class=\"hljs-built_in\">int</span> Y, <span class=\"hljs-built_in\">string</span>? ResultPath</span>) : IRequest&#x3C;<span class=\"hljs-built_in\">int</span>></span>\n{ }\n</code></pre>\n<p>Command contains <code>nullable</code> ResultPath. If it exists we will save result to file by this provided path.</p>\n<p>And handler for it in <code>Business/Handlers</code>:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Business.Handlers</span>;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AddNumbersHandler</span> : <span class=\"hljs-title\">IRequestHandler</span>&#x3C;<span class=\"hljs-title\">AddNumbersCommand</span>>\n{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> ILogger&#x3C;AddNumbersHandler> _logger;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> ICalculator _calculator;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> IFileService _fileService;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AddNumbersHandler</span>(<span class=\"hljs-params\">\n        ILogger&#x3C;AddNumbersHandler> logger,\n        ICalculator calculator,\n        IFileService fileService\n    </span>)</span>\n    {\n        _logger = logger;\n        _calculator = calculator;\n        _fileService = fileService;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">async</span> Task&#x3C;Unit> <span class=\"hljs-title\">Handle</span>(<span class=\"hljs-params\">AddNumbersCommand request, CancellationToken ct</span>)</span>\n    {\n        <span class=\"hljs-keyword\">var</span> (x, y, resultPath) = request;\n        <span class=\"hljs-keyword\">try</span>\n        {\n            _logger.LogInformation(<span class=\"hljs-string\">\"Adding values {X} and {Y}\"</span>, x, y);\n            <span class=\"hljs-keyword\">var</span> result = _calculator.Add(x, y);\n            _logger.LogInformation(<span class=\"hljs-string\">\"Calculated result: {Result}\"</span>, result);\n\n            <span class=\"hljs-keyword\">if</span> (resultPath <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\n            {\n                _logger.LogInformation(<span class=\"hljs-string\">\"Saving result to file {Path}\"</span>, resultPath);\n                <span class=\"hljs-keyword\">var</span> content = <span class=\"hljs-string\">$\"Adding <span class=\"hljs-subst\">{x}</span> + <span class=\"hljs-subst\">{y}</span> = <span class=\"hljs-subst\">{result}</span>\\n\"</span>;\n                <span class=\"hljs-keyword\">await</span> _fileService.SaveToFileAsync(resultPath, content, ct);\n                _logger.LogInformation(<span class=\"hljs-string\">\"Result saved\"</span>);\n            }\n\n            <span class=\"hljs-keyword\">return</span> Unit.Value;\n        }\n        <span class=\"hljs-keyword\">catch</span> (Exception e)\n        {\n            _logger.LogError(e, <span class=\"hljs-string\">\"Error happened during handling addition of values {X} and {Y}\"</span>, x, y);\n            <span class=\"hljs-keyword\">throw</span>;\n        }\n    }\n}\n</code></pre>\n<p>To register <code>MediatR</code> with <code>DI</code> container add it to <code>ServiceProvider</code> configuration in <code>Program.cs</code>:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">var</span> serviceProvider = <span class=\"hljs-keyword\">new</span> ServiceCollection()\n    .AddSerilogLogging()\n    .AddMediatR(<span class=\"hljs-keyword\">typeof</span>(AddNumbersHandler).Assembly)\n    .AddSingleton&#x3C;ICalculator, Calculator>()\n    .AddSingleton&#x3C;IFileService, FileService>()\n    .BuildServiceProvider();\n</code></pre>\n<h2>CLI</h2>\n<p>\n  Now we can start to create a main part of this guide - CLI parameters parsing and routing them to\n  proper command handler.\n</p>\n<p>In <code>Program.cs</code> file add following code, which creates <code>Microsoft.Extensions.CommandLineUtils</code> app:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> CommandLineApplication();\napp.Name = <span class=\"hljs-string\">\"CSharp CLI Application\"</span>;\napp.Description = <span class=\"hljs-string\">\"Simple C# console application\"</span>;\napp.HelpOption(<span class=\"hljs-string\">\"-h|--help\"</span>);\n</code></pre>\n<p>Here we create command line app object, where define it's name, description and define command to get help.</p>\n<p>Next we will configure <code>add numbers</code> command.</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">var</span> mediator = serviceProvider.GetRequiredService&#x3C;IMediator>();\n<span class=\"hljs-keyword\">var</span> logger = serviceProvider.GetRequiredService&#x3C;ILogger&#x3C;Program>>();\n\napp.Command(<span class=\"hljs-string\">\"add\"</span>, (opt) =>\n{\n    <span class=\"hljs-keyword\">var</span> x = opt.Argument(\n        name: <span class=\"hljs-string\">\"&#x3C;x>\"</span>,\n        description: <span class=\"hljs-string\">\"first number\"</span>\n    );\n    <span class=\"hljs-keyword\">var</span> y = opt.Argument(\n        name: <span class=\"hljs-string\">\"&#x3C;y>\"</span>,\n        description: <span class=\"hljs-string\">\"second number\"</span>\n    );\n    <span class=\"hljs-keyword\">var</span> resultPath = opt.Option(\n        template: <span class=\"hljs-string\">\"-rp|--result-path\"</span>,\n        description: <span class=\"hljs-string\">\"file path to save result\"</span>,\n        CommandOptionType.SingleValue\n    );\n    opt.HelpOption(<span class=\"hljs-string\">\"-h|--help\"</span>);\n\n    opt.OnExecute(<span class=\"hljs-keyword\">async</span> () =>\n    {\n        <span class=\"hljs-keyword\">try</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">int</span>.TryParse(x.Value, <span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">var</span> xInt))\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$\"first argument <span class=\"hljs-subst\">{x.Value}</span> is not a number\"</span>);\n            }\n            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">int</span>.TryParse(y.Value, <span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">var</span> yInt))\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$\"first argument <span class=\"hljs-subst\">{y.Value}</span> is not a number\"</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> command = <span class=\"hljs-keyword\">new</span> AddNumbersCommand\n            (\n                X: xInt,\n                Y: yInt,\n                ResultPath: resultPath.Values.Count > <span class=\"hljs-number\">0</span> ? resultPath.Values[<span class=\"hljs-number\">0</span>] : <span class=\"hljs-literal\">null</span>\n            );\n            <span class=\"hljs-keyword\">await</span> mediator.Send(command);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-keyword\">catch</span> (ArgumentException e)\n        {\n            logger.LogError(<span class=\"hljs-string\">\"Error happened: {Message}\"</span>, e.Message);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">catch</span> (Exception)\n        {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        }\n    });\n});\n\napp.Execute(args);\n</code></pre>\n<p>Here with <code>app.Command()</code> we create command handler with name <code>add</code>. If we run <code>--help</code> command of our app(inside of <code>./CLI</code> project) we will see something like this:</p>\n<pre><code class=\"hljs language-txt\">$: dotnet run -- --help\n\n\nUsage: CSharp CLI Application [options] [command]\n\nOptions:\n  -h|--help  Show help information\n\nCommands:\n  add\n\nUse \"CSharp CLI Application [command] --help\" for more information about a command.\n</code></pre>\n<p>Then inside of command handler delegate we define arguments - first and second numbers to add and optional parameters - file path to save result and define help option for <code>add</code> command.</p>\n<p>\n  And finally with <code>opt.OnExecute</code> we define handler function, which will be executed to handle <code>add</code> command.\n  Inside of this handler we specify logic to parse arguments to their target types and handling of\n  possible parsing errors. When we have parsed parameters, using <code>mediator</code> we route our data to\n  proper <code>add numbers</code> handler.\n</p>\n<p>Running help for <code>add</code> command in our <code>CLI</code> project we will get following result:</p>\n<pre><code class=\"hljs language-txt\">$: dotnet run -- add --help\n\n\nUsage: CSharp CLI Application add [arguments] [options]\n\nArguments:\n  &#x3C;x>  first number\n  &#x3C;y>  second number\n\nOptions:\n  -rp|--result-path  file path to save result\n  -h|--help          Show help information\n</code></pre>\n<p>Now we can test our app. Running it with valid data gives following:</p>\n<pre><code class=\"hljs language-txt\">$: dotnet run -- add 2 2\n\n[23:10:46 INF] Adding values 2 and 2\n[23:10:46 INF] Calculated result: 4\n</code></pre>\n<p>Running with optional file path for saving result:</p>\n<pre><code class=\"hljs language-txt\">$: dotnet run -- add 2 2 --result-path results.txt\n\n[23:11:59 INF] Adding values 2 and 2\n[23:11:59 INF] Calculated result: 4\n[23:11:59 INF] Saving result to file results.txt\n[23:11:59 INF] Result saved\n</code></pre>\n<p>And also file <code>results.txt</code> will be created with content:</p>\n<pre><code class=\"hljs language-txt\">Adding 2 + 2 = 4\n</code></pre>\n<p>If we provide not valid input for add:</p>\n<pre><code class=\"hljs language-txt\">$: dotnet run -- add 2 asf\n\n[23:13:35 ERR] Error happened: Second argument asf is not a number\n</code></pre>\n<p>And if we provide command, that does not exist program will return an error:</p>\n<pre><code class=\"hljs language-txt\">$: dotnet run -- subtract 2 2\n\nSpecify --help for a list of available options and commands.\nUnhandled exception. Microsoft.Extensions.CommandLineUtils.CommandParsingException: Unrecognized command or argument 'subtract'\n   at Microsoft.Extensions.CommandLineUtils.CommandLineApplication.Execute(String[] args)\n   at Program.&#x3C;Main>$(String[] args) in ./csharp-cli-app/CLI/Program.cs:line 78\n</code></pre>\n"}},"__N_SSG":true}