{"pageProps":{"noteKey":["javascript","Node.Js","node-http"],"note":{"title":"Node.Js Http","date":"2022-04-26","content":"\n<p>Node.Js has rich <code>http</code> protocol support built in. Functions, related to serving <code>http</code> are gathered in <code>node:http</code> module.</p>\n<p>To import it using <code>common-js</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'node:http'</span>);\n</code></pre>\n<p>Or <code>es6</code> imports:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> http <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'node:http'</span>;\n</code></pre>\n<h2>Http Server</h2>\n<p><code>http</code> module contains default implementation of an http server. To create simple version of it use <code>http.createServer</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> server = http.<span class=\"hljs-title function_\">createServer</span>(\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">req: IncomingMessage, res: ServerResponse</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">`serving request: <span class=\"hljs-subst\">${req.method}</span>: <span class=\"hljs-subst\">${req.url}</span>`</span>);\n\n    res.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">\"RESPONSE\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n      <span class=\"hljs-keyword\">if</span> (err) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n      }\n    });\n\n    res.<span class=\"hljs-title function_\">end</span>();\n  }\n);\n\nserver.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8000</span>, <span class=\"hljs-function\">() =></span> { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"listening on port 8000\"</span>); });\n</code></pre>\n<p>This code creates http server, which will listen for requests on port <code>8000</code>.</p>\n<p>Here <code>createServer</code> has signature:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-params\">requestListener?: RequestListener</span>): <span class=\"hljs-title class_\">Server</span>;\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">RequestListener</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">req: IncomingMessage, res: ServerResponse</span>) =></span> <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<p>To parse url there is <code>node:url</code> module:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">reqUrl</span>: <span class=\"hljs-title class_\">UrlWithParsedQuery</span> = url.<span class=\"hljs-title function_\">parse</span>(req.<span class=\"hljs-property\">url</span>, <span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(reqUrl.<span class=\"hljs-property\">pathname</span>);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> val <span class=\"hljs-keyword\">in</span> reqUrl.<span class=\"hljs-property\">query</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${val}</span> => <span class=\"hljs-subst\">${reqUrl.query[val]}</span>`</span>);\n}\n</code></pre>\n<p>where <code>UrlWithParsedQuery</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Url</span> {\n    <span class=\"hljs-attr\">auth</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">href</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">pathname</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">search</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">slashes</span>: <span class=\"hljs-built_in\">boolean</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">query</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span> | <span class=\"hljs-title class_\">ParsedUrlQuery</span>;\n}\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UrlWithParsedQuery</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Url</span> {\n    <span class=\"hljs-attr\">query</span>: <span class=\"hljs-title class_\">ParsedUrlQuery</span>;\n}\n</code></pre>\n<p><strong>Simple html server example:</strong></p>\n<p>Let's create a simple implementation of an <code>html</code> server, which will serve <code>html</code> file depending on url path.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> http, { <span class=\"hljs-title class_\">IncomingMessage</span>, <span class=\"hljs-title class_\">ServerResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"node:http\"</span>;\n<span class=\"hljs-keyword\">import</span> url, { <span class=\"hljs-title class_\">UrlWithParsedQuery</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"node:url\"</span>;\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"node:fs\"</span>;\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"node:path\"</span>;\n\n<span class=\"hljs-comment\">// this function constructs path in local file system </span>\n<span class=\"hljs-comment\">// to locate particular html file by url path</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getServedFileName</span> = (<span class=\"hljs-params\">requestPath: <span class=\"hljs-built_in\">string</span></span>) => {\n  <span class=\"hljs-keyword\">if</span> (requestPath === <span class=\"hljs-string\">\"/\"</span>) {\n    <span class=\"hljs-keyword\">return</span> path.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\"..\"</span>, <span class=\"hljs-string\">\"public\"</span>, <span class=\"hljs-string\">\"index.html\"</span>);\n  }\n  <span class=\"hljs-keyword\">return</span> path.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\"..\"</span>, <span class=\"hljs-string\">\"public\"</span>, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${requestPath}</span>.html`</span>);\n};\n\n<span class=\"hljs-comment\">// creating http server</span>\n<span class=\"hljs-keyword\">const</span> server = http.<span class=\"hljs-title function_\">createServer</span>(\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">req: IncomingMessage, res: ServerResponse</span>) =></span> {\n    <span class=\"hljs-keyword\">if</span> (!req.<span class=\"hljs-property\">url</span>) {\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">\"Bad request\"</span>);\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">end</span>();\n    }\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">requestUrl</span>: <span class=\"hljs-title class_\">UrlWithParsedQuery</span> = url.<span class=\"hljs-title function_\">parse</span>(req.<span class=\"hljs-property\">url</span>, <span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-keyword\">const</span> requestPath = requestUrl.<span class=\"hljs-property\">pathname</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">\"serving: \"</span> + requestPath);\n\n    <span class=\"hljs-keyword\">if</span> (!requestPath) {\n      res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">\"Bad request\"</span>);\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">end</span>();\n    }\n\n    <span class=\"hljs-comment\">// generate path to correct html page file</span>\n    <span class=\"hljs-keyword\">const</span> fileName = <span class=\"hljs-title function_\">getServedFileName</span>(requestPath);\n\n    <span class=\"hljs-comment\">// reading file from local file system</span>\n    fs.<span class=\"hljs-title function_\">readFile</span>(fileName, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =></span> {\n      <span class=\"hljs-keyword\">if</span> (err) {\n        res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">\"Server error\"</span>);\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n        <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">end</span>();\n      }\n\n      res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">\"OK\"</span>);\n      res.<span class=\"hljs-title function_\">write</span>(data, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n        <span class=\"hljs-keyword\">if</span> (err) {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">`Error serving request <span class=\"hljs-subst\">${err}</span>`</span>);\n        }\n      });\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">end</span>();\n    });\n  }\n);\n\n<span class=\"hljs-comment\">// starting the server</span>\nserver.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8000</span>, <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"listening on port 8000\"</span>);\n});\n</code></pre>\n<p>\n  This implementation assumes, that <code>html</code> files are placed in a folder named <code>public</code>, which located\n  one level up from our running server.\n</p>\n<h2>HTTP Requests</h2>\n<p>Node.Js <code>http</code> module has an ability to perform <code>HTTP</code> requests. To do this, use <code>http.request</code> function.</p>\n<p>For example:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> makeRawHttpRequest&#x3C;T>(\n  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-attr\">urlPath</span>: <span class=\"hljs-built_in\">string</span>\n): <span class=\"hljs-title class_\">Promise</span>&#x3C;T> {\n  <span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">hostname</span>: host,\n    <span class=\"hljs-attr\">path</span>: urlPath,\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"GET\"</span>,\n  };\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>&#x3C;T>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n    http\n      .<span class=\"hljs-title function_\">request</span>(options, <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> {\n        <span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-string\">\"\"</span>;\n\n        res.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"data\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =></span> {\n          data += chunk;\n        });\n\n        res.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"end\"</span>, <span class=\"hljs-function\">() =></span> {\n          <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(data) <span class=\"hljs-keyword\">as</span> T;\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Body:\"</span>, result);\n          <span class=\"hljs-title function_\">resolve</span>(result);\n        });\n      })\n      .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"error\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Error: \"</span>, err);\n        <span class=\"hljs-title function_\">reject</span>(err);\n      })\n      .<span class=\"hljs-title function_\">end</span>();\n  });\n}\n</code></pre>\n<p>\n  But this requires some boilerplate code to manually handle stream events and parse data.\n  There are many third party libraries, like <code>axios</code>, which simplify this process.\n</p>\n<h2>Plan</h2>\n<ul>\n  <li>http2</li>\n  <li>https</li>\n  <li>axios</li>\n</ul>\n"}},"__N_SSG":true}