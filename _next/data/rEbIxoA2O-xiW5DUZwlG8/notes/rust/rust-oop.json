{"pageProps":{"noteKey":["rust","rust-oop"],"note":{"title":"Rust - OOP Features","date":"2022-03-02","content":"\n<h2>Traits</h2>\n<p>\n  It is allowed for different traits to have method definitions with same signatures and also these\n  traits may be implements on the same struct. Moreover, this struct can implement method with same\n  signature on it's <code>impl</code> block.\n</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Pilot</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fly</span>(&#x26;<span class=\"hljs-keyword\">self</span>);\n}\n\n<span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Wizard</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fly</span>(&#x26;<span class=\"hljs-keyword\">self</span>);\n}\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Human</span>;\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Pilot</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Human</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fly</span>(&#x26;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"This is your captain speaking.\"</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Wizard</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Human</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fly</span>(&#x26;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Up!\"</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Human</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fly</span>(&#x26;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*waving arms furiously*\"</span>);\n    }\n}\n</code></pre>\n<p>When we try to create <code>Human</code> and run <code>fly</code> method, own <code>Human</code>'s implementation will be called:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">person</span> = Human;\n    person.<span class=\"hljs-title function_ invoke__\">fly</span>();\n}\n<span class=\"hljs-comment\">// will print: \"*waving arms furiously*\"</span>\n</code></pre>\n<p>If we need to run implementation of <code>fly</code> from specific trait, we need to call it explicitly:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">person</span> = Human;\n    Pilot::<span class=\"hljs-title function_ invoke__\">fly</span>(&#x26;person);\n    Wizard::<span class=\"hljs-title function_ invoke__\">fly</span>(&#x26;person);\n    person.<span class=\"hljs-title function_ invoke__\">fly</span>();\n}\n</code></pre>\n<h2>Supertraits</h2>\n<p><code>Supertraits</code> allow to inherit functionality from another traits. For example:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> std::fmt;\n\n<span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">OutlinePrint</span>: fmt::Display {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">outline_print</span>(&#x26;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">len</span> = output.<span class=\"hljs-title function_ invoke__\">len</span>();\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-string\">\"*\"</span>.<span class=\"hljs-title function_ invoke__\">repeat</span>(len + <span class=\"hljs-number\">4</span>));\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*{}*\"</span>, <span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-title function_ invoke__\">repeat</span>(len + <span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"* {} *\"</span>, output);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*{}*\"</span>, <span class=\"hljs-string\">\" \"</span>.<span class=\"hljs-title function_ invoke__\">repeat</span>(len + <span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-string\">\"*\"</span>.<span class=\"hljs-title function_ invoke__\">repeat</span>(len + <span class=\"hljs-number\">4</span>));\n    }\n}\n</code></pre>\n<p>\n  <code>OutlinePrint</code> extends functionality of <code>fmt::Display</code> trait so it is possible to use <code>self.to_string</code>\n  inside of it's methods.\n</p>\n<p>But we still need to implement <code>fmt::Display</code> to make it work:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\n    x: <span class=\"hljs-type\">i32</span>,\n    y: <span class=\"hljs-type\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">OutlinePrint</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Point</span> {}\n\n<span class=\"hljs-keyword\">use</span> std::fmt;\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">fmt</span>::Display <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Point</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fmt</span>(&#x26;<span class=\"hljs-keyword\">self</span>, f: &#x26;<span class=\"hljs-keyword\">mut</span> fmt::Formatter) <span class=\"hljs-punctuation\">-></span> fmt::<span class=\"hljs-type\">Result</span> {\n        <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"({}, {})\"</span>, <span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y)\n    }\n}\n</code></pre>\n<h2>References</h2>\n<ul>\n  <li><a href=\"https://doc.rust-lang.org/stable/book/ch19-03-advanced-traits.html\">Advanced Traits</a></li>\n</ul>\n"}},"__N_SSG":true}