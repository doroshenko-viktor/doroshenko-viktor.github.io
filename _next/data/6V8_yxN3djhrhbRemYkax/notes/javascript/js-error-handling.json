{"pageProps":{"noteKey":["javascript","js-error-handling"],"note":{"title":"JavaScript Error Handling","date":"2022-04-13","content":"\n<ul>\n  <li><a href=\"#error-object\">Error Object</a></li>\n  <li><a href=\"#error-handling\">Error Handling</a></li>\n  <li><a href=\"#async-error-handling\">Async Error Handling</a></li>\n  <li><a href=\"#error-event\">Error Event</a></li>\n  <li><a href=\"#custom-errors\">Custom Errors</a></li>\n  <li><a href=\"#references\">References</a></li>\n</ul>\n<p>\n  When on some part of code execution unexpected situation happens will be created and thrown <code>Error</code> object. Then going up by call stack <code>JavaScript</code> interpreter will check for <code>try/catch</code> logic on each next\n  level until the end of call stack resulting to termination of the program.\n</p>\n<h2>Error Object</h2>\n<p><code>Error</code> is a most basic type of exception object in <code>JavaScript</code>. Also this object is often used as a custom error objects prototype.</p>\n<p>Standard forces exception to have at least two fields:</p>\n<ul>\n  <li><code>name</code> - defined type of error</li>\n  <li><code>message</code> - human readable description of exception, which should give some error context</li>\n</ul>\n<p>On most modern browsers <code>Error</code> object contains <code>stack</code> field, which contains information about call stack of execution, which may be useful to get a context of exception.</p>\n<p><strong>Built-in <code>JS</code> error types:</strong></p>\n<ul>\n  <li>\n    <p><code>RangeError</code> - usually thrown, when out of expected input provided. e.g. following code will throw <code>RangeError</code>:</p>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> pi = <span class=\"hljs-number\">3.14159</span>\npi.<span class=\"hljs-title function_\">toFixed</span>(<span class=\"hljs-number\">100000</span>)\n</code></pre>\n  </li>\n  <li>\n    <p><code>ReferenceError</code> - is thrown on attempt to access non existing variable</p>\n  </li>\n  <li>\n    <p><code>SyntaxError</code> - is thrown, when syntactically invalid provided to the <code>JS</code> interpreter</p>\n  </li>\n  <li>\n    <p><code>TypeError</code> - thrown, when there is an attempt to use a type in a not appropriate way. e.g. trying to execute non-existing method</p>\n  </li>\n  <li>\n    <p><code>URIError</code> - thrown by <code>encodeURI</code> or <code>decodeURI</code>, when not valid <code>url</code> provided</p>\n  </li>\n  <li>\n    <p><code>EvalError</code> - thrown by <code>eval</code> function</p>\n  </li>\n</ul>\n<h2>Error Handling</h2>\n<p>There is a special construct to handle errors in <code>JavaScript</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// executing code</span>\n} <span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-comment\">// handling possible error</span>\n} <span class=\"hljs-keyword\">finally</span> {\n  <span class=\"hljs-comment\">// this will be executed both in success and error cases</span>\n}\n</code></pre>\n<p><em>catch</em> block stops propagation of error further up on the call stack and allows to react to the error happened.</p>\n<p>When there is a need to differentiate reaction on different kinds of errors it is possible to use <code>instanceof</code> operator to distinguish error type:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// ...</span>\n} <span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-keyword\">if</span> (err <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">TypeError</span>) {\n    <span class=\"hljs-comment\">// handling TypeError</span>\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (err <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">ReferenceError</span>) {\n    <span class=\"hljs-comment\">// handling ReferenceError</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// handle any other error type, e.g.</span>\n    <span class=\"hljs-keyword\">throw</span> err\n  }\n}\n</code></pre>\n<p>It is possible to re-throw caught error any number of times.</p>\n<h2>Async Error Handling</h2>\n<p>When dealing with asynchronous code <code>try/catch</code> clause may not catch possible exceptions. This may happen because asynchronous function running outside of call stack, calling it.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-title function_\">throwingAsyncFunc</span>() <span class=\"hljs-comment\">// this function throws exception asynchronously</span>\n} <span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-comment\">// exception will not be caught here</span>\n}\n</code></pre>\n<p>If <code>throwingAsyncFunc</code> returns <code>Promise</code> it is possible to use <code>async/await</code> pattern to handle it's errors with <code>try/catch</code> block:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">throwingAsyncFunc</span>() <span class=\"hljs-comment\">// this function throws exception asynchronously</span>\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    <span class=\"hljs-comment\">// exception will be caught here</span>\n  }\n}\n</code></pre>\n<h2>Error Event</h2>\n<p>In <code>JavaScript</code> errors are also events. So it is possible to react on this events. For example in browser api it is possible to do with following event listener:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"error\"</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">error</span>)\n})\n</code></pre>\n<p>\n  Such error handler will catch unhandled errors from any execution context.\n  Moreover, <code>addEventListener</code> allows to attach to the <code>error</code> event variety of different handlers.\n  This allows to create many centralized handlers for different error types.\n</p>\n<p>For <code>Node.Js</code>:</p>\n<pre><code class=\"hljs language-js\">process.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"uncaughtException\"</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n  <span class=\"hljs-comment\">// handle error</span>\n})\n</code></pre>\n<p>It is also useful to use error events and not directly throw an error when dealing with streams.</p>\n<pre><code class=\"hljs language-js\">source.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">stream</span> =></span> {\n  stream\n    .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"data\"</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =></span> {\n      <span class=\"hljs-comment\">// handle arriving piece of data</span>\n    })\n    .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"end\"</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n      <span class=\"hljs-comment\">// handling end of stream</span>\n    })\n    .<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"error\"</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> {\n      <span class=\"hljs-comment\">// handling possible error during the stream</span>\n    })\n})\n</code></pre>\n<h2>Custom Errors</h2>\n<p>If there is a need to catch and re-throw some custom exception up it is a good practice to maintain a context of previous exception:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomError</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Error</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">message, err</span>) {\n    <span class=\"hljs-variable language_\">super</span>(message)\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Error</span>.<span class=\"hljs-property\">captureStackTrace</span>) {\n      <span class=\"hljs-title class_\">Error</span>.<span class=\"hljs-title function_\">captureStackTrace</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-title class_\">CustomError</span>)\n    }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">wrappedError</span> = err\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">\"CustomError\"</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">date</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()\n  }\n}\n</code></pre>\n<h2>References</h2>\n<ul>\n  <li><a href=\"https://blog.bitsrc.io/errors-handling-for-vue-class-components-2f152f7c7515\">Better errors handling for ES/Typescript classes</a></li>\n  <li><a href=\"https://www.sitepoint.com/proper-error-handling-javascript/\">A Guide to Proper Error Handling in JavaScript</a></li>\n  <li><a href=\"https://sematext.com/blog/node-js-error-handling/#toc-types-of-errors-operational-vs-programmer-errors-2\">Node.js Error Handling Made Easy: Best Practices On Just About Everything You Need to Know</a></li>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">MDN Error</a></li>\n</ul>\n"}},"__N_SSG":true}