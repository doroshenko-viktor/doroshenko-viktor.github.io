{"pageProps":{"noteKey":["javascript","Node.Js","node-file-system"],"note":{"title":"Node.JS File System","date":"2022-04-24","content":"\n<h2>FS Module</h2>\n<p><code>fs</code> is a <code>node.js</code> module providing access to the file system.</p>\n<h3>Opening Files</h3>\n<p>Function <code>open</code> from <code>fs</code> allows to open file from file system.</p>\n<p>It has signature:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">open</span>(<span class=\"hljs-params\">\n    path: PathLike, \n    flags: OpenMode, \n    callback: (err: NodeJS.ErrnoException | <span class=\"hljs-literal\">null</span>, fd: <span class=\"hljs-built_in\">number</span>) => <span class=\"hljs-built_in\">void</span>\n</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<table>\n  <thead>\n    <tr>\n      <th align=\"left\">Flag</th>\n      <th align=\"left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td align=\"left\">r</td>\n      <td align=\"left\">Open file for read. Throws exception if file doesn’t exists.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">r+</td>\n      <td align=\"left\">Open file to read and write. Throws exception if file doesn’t exists.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">rs+</td>\n      <td align=\"left\">Open file in synchronous mode to read and write.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">w</td>\n      <td align=\"left\">Open file for writing. File is created if it doesn’t exists.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">wx</td>\n      <td align=\"left\">It is same as ‘w’ but fails if path exists.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">w+</td>\n      <td align=\"left\">Open file to read and write. File is created if it doesn’t exists.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">wx+</td>\n      <td align=\"left\">It is same as ‘w+’ but fails if path exists.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">a</td>\n      <td align=\"left\">Open file to append. File is created if it doesn’t exists.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">ax</td>\n      <td align=\"left\">It is same as ‘a’ but fails if path exists.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">a+</td>\n      <td align=\"left\">Open file for reading and appending. File is created if it doesn’t exists.</td>\n    </tr>\n    <tr>\n      <td align=\"left\">ax+</td>\n      <td align=\"left\">It is same as ‘a+’ but fails if path exists.</td>\n    </tr>\n  </tbody>\n</table>\n<p>If file does not exist, it will be created.</p>\n<h3>Creating Files</h3>\n<p>To create new file and write data to it <code>fs.write()</code> is used:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> write&#x3C;<span class=\"hljs-title class_\">TBuffer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">NodeJS</span>.<span class=\"hljs-property\">ArrayBufferView</span>>(\n    <span class=\"hljs-attr\">fd</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">buffer</span>: <span class=\"hljs-title class_\">TBuffer</span>,\n    <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">undefined</span> | <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">length</span>: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">undefined</span> | <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">position</span>: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">undefined</span> | <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">callback</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">err: NodeJS.ErrnoException | <span class=\"hljs-literal\">null</span>, written: <span class=\"hljs-built_in\">number</span>, buffer: TBuffer</span>) =></span> <span class=\"hljs-built_in\">void</span>\n): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">writeContentToFile</span>(<span class=\"hljs-params\">\n  path: PathLike,\n  content: <span class=\"hljs-built_in\">string</span>\n</span>): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-built_in\">void</span>> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n    <span class=\"hljs-comment\">// open file in write mode</span>\n    fs.<span class=\"hljs-title function_\">open</span>(path, <span class=\"hljs-string\">\"w\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, fd</span>) =></span> {\n      <span class=\"hljs-keyword\">if</span> (err) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n        <span class=\"hljs-title function_\">reject</span>(err);\n      }\n\n      <span class=\"hljs-comment\">// write content into opened file</span>\n      fs.<span class=\"hljs-title function_\">write</span>(fd, content, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, numberWritten, str</span>) =></span> {\n        <span class=\"hljs-keyword\">if</span> (err) {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n          <span class=\"hljs-title function_\">reject</span>(err);\n        }\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`number written: <span class=\"hljs-subst\">${numberWritten}</span>, str: <span class=\"hljs-subst\">${str}</span>`</span>);\n        <span class=\"hljs-title function_\">resolve</span>();\n      });\n    });\n  });\n}\n</code></pre>\n<p>There is a simpler way to write file - <code>fs.writeFile()</code>:</p>\n<pre><code class=\"hljs language-ts\">  fs.<span class=\"hljs-title function_\">writeFile</span>( path, content, { <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">\"utf-8\"</span> }, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n    }\n  );\n</code></pre>\n<p><code>writeFile</code> has signature:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">writeFile</span>(<span class=\"hljs-params\">\n    file: PathOrFileDescriptor, \n    data: <span class=\"hljs-built_in\">string</span> | NodeJS.ArrayBufferView, \n    options: WriteFileOptions, \n    callback: NoParamCallback\n</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<p>\n  To append some data to an existing file or create new if file does not exist there is a method <code>fs.appendFile()</code>\n  with following signature:\n</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">appendFile</span>(<span class=\"hljs-params\">\n  path: PathOrFileDescriptor,\n  data: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">Uint8Array</span>,\n  options: WriteFileOptions,\n  callback: NoParamCallback\n</span>): <span class=\"hljs-built_in\">void</span>\n</code></pre>\n<p>where <code>callback</code> is of signature:</p>\n<pre><code class=\"hljs language-ts\">(<span class=\"hljs-attr\">err</span>: <span class=\"hljs-title class_\">NodeJS</span>.<span class=\"hljs-property\">ErrnoException</span> | <span class=\"hljs-literal\">null</span>) => <span class=\"hljs-built_in\">void</span>\n</code></pre>\n<p>In case of any error object <code>err</code> of the callback will contain error of type:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ErrnoException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Error</span> {\n  errno?: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">undefined</span>\n  code?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>\n  path?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>\n  syscall?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span>\n}\n</code></pre>\n<h3>Removing Files</h3>\n<p>To remove file from file system use <code>fs.unlink</code>:</p>\n<pre><code class=\"hljs language-ts\">fs.<span class=\"hljs-title function_\">unlink</span>(path, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n  <span class=\"hljs-keyword\">if</span> (err) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'File deleted!'</span>);\n  }\n});\n</code></pre>\n<h3>Files Metadata</h3>\n<p>To get file metadata use:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">stat</span>(<span class=\"hljs-params\">\n    path: PathLike, \n    callback: (err: NodeJS.ErrnoException | <span class=\"hljs-literal\">null</span>, stats: Stats) => <span class=\"hljs-built_in\">void</span>\n</span>): <span class=\"hljs-built_in\">void</span>;\n</code></pre>\n<p><code>Stats</code> object contains:</p>\n<ul>\n  <li><code>isFile(): boolean</code></li>\n  <li><code>isDirectory(): boolean</code></li>\n  <li><code>isBlockDevice(): boolean</code></li>\n  <li><code>isCharacterDevice(): boolean</code></li>\n  <li><code>isSymbolicLink(): boolean</code></li>\n  <li><code>isFIFO(): boolean</code></li>\n  <li><code>isSocket(): boolean</code></li>\n</ul>\n<p>To rename files there is a <code>fs.rename()</code> function:</p>\n<pre><code class=\"hljs language-ts\">fs.<span class=\"hljs-title function_\">rename</span>(existingFilePath, newFileName, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n  <span class=\"hljs-keyword\">if</span> (err) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'File Renamed!'</span>);\n  }\n});\n</code></pre>\n<h2>Stream API</h2>\n<p>\n  Stream is a way to transfer data continuously. It is especially useful with large data, which could not be\n  loaded into RAM otherwise.\n</p>\n<p><code>node:fs</code> module contains functions to operate streams over files.</p>\n<p>To create read stream:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> stream = fs.<span class=\"hljs-title function_\">createReadStream</span>(filePath);\n</code></pre>\n<p><code>createReadStream</code> has signature:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createReadStream</span>(<span class=\"hljs-params\">\n    path: PathLike, \n    options?: BufferEncoding | ReadStreamOptions\n</span>): <span class=\"hljs-title class_\">ReadStream</span>;\n</code></pre>\n<p>To read data from create stream there is a <code>data</code> event, which should be listened:</p>\n<pre><code class=\"hljs language-ts\">stream.<span class=\"hljs-title function_\">setEncoding</span>(<span class=\"hljs-string\">\"utf8\"</span>);\nstream.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"data\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">string</span> | Buffer</span>) =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n});\n</code></pre>\n<p>To create write file stream there is a <code>fs.createWriteStream()</code> function:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> stream = fs.<span class=\"hljs-title function_\">createWriteStream</span>(path, {\n    <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">\"utf-8\"</span>,\n});\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>; x &#x3C; <span class=\"hljs-number\">100</span>; x++) {\n    stream.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${x}</span>\\n`</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n    });\n}\n</code></pre>\n<p>This example will write 100 lines with increasing numbers into file with path equal to <code>path</code> variable value.</p>\n<p>\n  Streams can be piped with other streams. For example we can create stream over http to download data\n  and pipe it to file stream to immediately write this data to file. For example:\n</p>\n<pre><code class=\"hljs language-ts\">axios.<span class=\"hljs-property\">get</span>&#x3C;<span class=\"hljs-title class_\">Readable</span>>(url, { <span class=\"hljs-attr\">responseType</span>: <span class=\"hljs-string\">\"stream\"</span> })\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">async</span> (response) => {\n        <span class=\"hljs-keyword\">const</span> fileWriteStream = fs.<span class=\"hljs-title function_\">createWriteStream</span>(<span class=\"hljs-string\">'./local-file'</span>);\n        response.<span class=\"hljs-property\">data</span>.<span class=\"hljs-title function_\">pipe</span>(fileWriteStream);\n    })\n    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error));\n</code></pre>\n<h2>Plan</h2>\n<ul>\n  <li><code>path</code></li>\n  <li><code>process.cwd()</code></li>\n</ul>\n"}},"__N_SSG":true}