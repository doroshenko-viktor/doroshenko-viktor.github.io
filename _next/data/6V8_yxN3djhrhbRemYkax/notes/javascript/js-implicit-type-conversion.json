{"pageProps":{"noteKey":["javascript","js-implicit-type-conversion"],"note":{"title":"JavaScript Type Conversions","date":"2022-08-03","content":"\n<h2>Conversion Of Different Types</h2>\n<h3>To String</h3>\n<p>\n  For primitive types conversion to <code>string</code> is obvious. This way <code>number</code> <code>1</code> will be converted to <code>string</code> <code>\"1\"</code>,\n  <code>boolean</code> <code>true</code> will be converted as <code>\"true\"</code> and <code>false</code> as <code>\"false\"</code>, <code>null</code> becomes <code>\"null\"</code>.\n</p>\n<p>\n  But in case of <code>object</code> types, things may become more complex. Each <code>js</code> object has <code>toString(): string</code> method. Every time\n  we want to get string representation of an <code>object</code> runtime will call this method. In case of primitive values, to reach\n  this runtime creates object wrapper on primitive. For example with <code>number</code> primitive <code>Number</code> object will be created.\n  <code>Number</code> already has correct implementation of <code>toString</code>. But in case of custom objects, we need to override <code>toString</code>.\n  Not doing so will result to call for a default implementation of <code>Object.prototype.toString</code>, which will return <code>\"[object Object]\"</code>\n  value.\n</p>\n<h3>To Number</h3>\n<p>\n  Usually we need to convert value to <code>number</code> from a <code>string</code>, e.g. after user input. If such string contains valid number, we\n  can use <code>parseInt(source): number</code>, which will convert to integer number or <code>parseFloat(source): number</code>, which will convert to\n  floating point number. Moreover, source string may contain number of different bases of numerical systems.\n</p>\n<p>In case if source string contains not a valid numerical value <code>NaN</code> value will be returned.</p>\n<p>Values like <code>null</code> and <code>undefined</code> on numerical conversion will result in <code>NaN</code>.</p>\n<p>Boolean <code>true</code> will be converted into <code>1</code> and <code>false</code> to <code>0</code>.</p>\n<h2>To Boolean</h2>\n<p>Number <code>0</code>, string <code>\"\"</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code> converts to <code>false</code>. And other values become <code>true</code>.</p>\n<h2>Implicit Conversion</h2>\n<p><code>JavaScript</code> may implicitly convert variable types to perform some operations. Implicit conversion happen in several cases:</p>\n<h3>With arithmetic operations</h3>\n<p>With <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>:</p>\n<ul>\n  <li>With unary <code>+</code> tries to convert to number;</li>\n</ul>\n<pre><code class=\"hljs language-js\">+x;\n+<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 1</span>\n+<span class=\"hljs-string\">\"1\"</span>; <span class=\"hljs-comment\">// 1</span>\n+<span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 1</span>\n+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(); <span class=\"hljs-comment\">// (a numeric value)</span>\n</code></pre>\n<ul>\n  <li>With two operands:</li>\n</ul>\n<pre><code class=\"hljs language-js\">a + b;\n{\n}\n+{}; <span class=\"hljs-comment\">// '[object object][object object]'</span>\n[] + []; <span class=\"hljs-comment\">// ''</span>\n[] + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(); <span class=\"hljs-comment\">// (A date string)</span>\n</code></pre>\n<ul>\n  <li>If operation is <code>+</code> and one operand is a <code>string</code>, converse the other to a <code>string</code></li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-string\">\"\"</span>; <span class=\"hljs-comment\">// '1'</span>\n<span class=\"hljs-string\">\"\"</span> + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// '1'</span>\n<span class=\"hljs-string\">\"\"</span> + <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 'true'</span>\n</code></pre>\n<ul>\n  <li>In other cases it tries to convert both to numbers:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-literal\">true</span> + <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 2</span>\n</code></pre>\n<ul>\n  <li>Converse value or values to number:</li>\n</ul>\n<pre><code class=\"hljs language-js\">-<span class=\"hljs-string\">\"1\"</span>; <span class=\"hljs-comment\">// -1</span>\n[] - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// -1</span>\n[] - {}; <span class=\"hljs-comment\">// NaN</span>\n</code></pre>\n<h3>In Not Strict Comparisons</h3>\n<p>Like <code>==</code>, <code>!=</code>, <code>></code>, <code>>=</code>, <code>&#x3C;</code>, <code>&#x3C;=</code>:</p>\n<ul>\n  <li><strong>Null And Undefined:</strong></li>\n</ul>\n<p>\n  If one of the comparing values is <code>null</code> and the other is <code>undefined</code>, they are equal in case of\n  not strict conversion:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>; <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p><strong>String And Number</strong></p>\n<p>If one operand is a <code>number</code> and the other is a <code>string</code>, convert the <code>string</code> to a <code>number</code> to compare:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">1</span> == <span class=\"hljs-string\">\"1\"</span>; <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p><strong>With Boolean</strong></p>\n<p>If either is boolean, convert it to a number</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-literal\">true</span> == <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-literal\">false</span> == <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>If one is an <code>object</code>, and the other is a <code>number</code> or a <code>string</code>, convert the <code>object</code> to a primitive:</p>\n<pre><code class=\"hljs language-bash\">[1] == 1 // <span class=\"hljs-literal\">true</span>\n[<span class=\"hljs-string\">'1'</span>] == <span class=\"hljs-string\">'1'</span> // <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>If either is an <code>object</code>, convert it to a primitive:</p>\n<pre><code class=\"hljs language-js\">[<span class=\"hljs-number\">2</span>] > <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>If both are <code>strings</code>, compare them using alphabetical order:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"b\"</span> > <span class=\"hljs-string\">\"a\"</span>; <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>If either is a <code>number</code>, convert one or two not <code>number</code> to a <code>number</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"2\"</span> > <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3>With <code>in</code> Operator</h3>\n<p>If left operand isn't a <code>string</code>, convert it to a <code>string</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"1\"</span> <span class=\"hljs-keyword\">in</span> { <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">\"\"</span> }; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">in</span> { <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">\"a\"</span> }; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>]; <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3>Logic Operators</h3>\n<p><code>&#x26;&#x26;</code>, <code>||</code>, <code>!</code></p>\n<p>If either isn't <code>boolean</code>, convert it to a <code>boolean</code> value:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Boolean</span>(<span class=\"hljs-literal\">null</span> || <span class=\"hljs-literal\">undefined</span> || <span class=\"hljs-number\">0</span> || -<span class=\"hljs-number\">0</span> || <span class=\"hljs-title class_\">NaN</span> || <span class=\"hljs-string\">\"\"</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-title class_\">Boolean</span>(<span class=\"hljs-number\">1</span> &#x26;&#x26; <span class=\"hljs-string\">\"a\"</span> &#x26;&#x26; {} &#x26;&#x26; [] &#x26;&#x26; [<span class=\"hljs-number\">0</span>] &#x26;&#x26; <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {}); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h2>References</h2>\n<ul>\n  <li><a href=\"https://itnext.io/master-javascript-implicit-type-conversion-573d0c90a3bf\">Master JavaScript Implicit Type Conversion</a></li>\n</ul>\n"}},"__N_SSG":true}