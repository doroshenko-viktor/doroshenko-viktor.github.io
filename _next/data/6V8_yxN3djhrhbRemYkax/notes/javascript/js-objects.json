{"pageProps":{"noteKey":["javascript","js-objects"],"note":{"title":"JavaScript Object","date":"2022-03-22","content":"\n<p>\n  <code>Object</code> is a basic structure in <code>js</code>. Almost all data structures, except some primitives like\n  <code>number</code>, <code>string</code>, <code>boolean</code>, <code>bigint</code>, <code>undefined</code>, <code>symbol</code> and <code>null</code> are inherited from <code>object</code>.\n  This also means that these inherited objects also have all properties from <code>Object.prototype</code>.\n</p>\n<p>To remove some keys from <code>object</code> there is a special operator <code>delete</code> for it.</p>\n<h2>Object Methods</h2>\n<ul>\n  <li>\n    <p>\n      <strong>assign:</strong> allows to copy source object properties into target object. This is something similar\n      to spread operator.\n    </p>\n  </li>\n  <li>\n    <p><strong>create:</strong> creates new object using provided object as it's prototype.</p>\n  </li>\n  <li>\n    <p><strong>entires:</strong> allows to get all provided object's key/value pairs in from of array</p>\n  </li>\n</ul>\n<h2>This</h2>\n<p><code>this</code> keyword allows to refer to object properties, related to context of execution.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> obj = {\n  <span class=\"hljs-attr\">key1</span>: <span class=\"hljs-string\">\"value1\"</span>,\n  <span class=\"hljs-title function_\">printValue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`key1: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.key1}</span>`</span>)\n  },\n}\n\nobj.<span class=\"hljs-title function_\">printValue</span>() <span class=\"hljs-comment\">// key1: value1</span>\n</code></pre>\n<p>\n  But it is important to understand that <code>this</code> in JavaScript is not always stick to object, where function, calling it is defined,\n  but it depends on context, where this function has been executed:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> obj = {\n  <span class=\"hljs-attr\">key1</span>: <span class=\"hljs-string\">\"value1\"</span>,\n  <span class=\"hljs-title function_\">printValue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`key1: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.key1}</span>`</span>)\n  },\n}\n\n<span class=\"hljs-keyword\">let</span> { printValue } = obj\n<span class=\"hljs-title function_\">printValue</span>() <span class=\"hljs-comment\">// `key1: undefined`</span>\n</code></pre>\n<p>Here <code>printValue</code> has been called in the not in context of <code>obj</code> where it is defined, but in context of <code>window</code> object, which means that here <code>this</code> is <code>window</code>.</p>\n<p><strong>bind:</strong></p>\n<p>\n  But it is possible to glue a function with it's context with <code>bind</code> method, which accepts as a first parameter object, which will be used as <code>this</code> on the next call\n  of the function. Rest parameters of <code>bind</code> are function parameters. Result of bind is a function, which, when executed in future, will use specified <code>this</code> object:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> obj = {\n  <span class=\"hljs-attr\">key1</span>: <span class=\"hljs-string\">\"value1\"</span>,\n  <span class=\"hljs-title function_\">printValue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`key1: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.key1}</span>`</span>)\n  },\n}\n\n<span class=\"hljs-keyword\">let</span> { printValue } = obj\nprintValue = printValue.<span class=\"hljs-title function_\">bind</span>(obj)\n<span class=\"hljs-title function_\">printValue</span>() <span class=\"hljs-comment\">// key1: value1</span>\n</code></pre>\n<p><strong>call:</strong></p>\n<p>\n  <code>call</code> method has similar signature and purpose as <code>bind</code>, the difference, that <code>call</code> immediately executes a function on which it has been executed with specified\n  object as <code>this</code>.\n</p>\n<pre><code class=\"hljs language-js\">func1.<span class=\"hljs-title function_\">call</span>(thisObj, param1, param2, ...);\n</code></pre>\n<p><strong>apply:</strong></p>\n<p>\n  <code>apply</code> method also allows to specify <code>this</code> and immediately call the function, but has different signature. It allows to pass parameters to executed function as an\n  array unlike <code>call</code>, which receives parameters as separated arguments.\n</p>\n<pre><code class=\"hljs language-js\">func1.<span class=\"hljs-title function_\">apply</span>(thisObj, [param1, param2, ...]);\n</code></pre>\n<h3>This With Different Function Definitions</h3>\n<p>\n  Regular function definition and function declaration takes it's <code>this</code> object from context of execution as described above. But arrow functions, declared with <code>() => {}</code>\n  syntax don't know about <code>this</code>. Such a functions will take it from external context. This means, that <code>this</code> inside of arrow function will be the object, from nearest\n  external level, where <code>this</code> is defined. For example:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> obj = {\n  <span class=\"hljs-attr\">key1</span>: <span class=\"hljs-string\">\"value1\"</span>,\n  <span class=\"hljs-title function_\">methodFunction</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`key1 from methodFunction: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.key1}</span>`</span>)\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">internalArrowFunc</span> = (<span class=\"hljs-params\"></span>) => {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`key1 from internalArrowFunc: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.key1}</span>`</span>)\n    }\n    <span class=\"hljs-title function_\">internalArrowFunc</span>()\n  },\n  <span class=\"hljs-attr\">arrowFunc</span>: <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`key1 from arrowFunc: <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.key1}</span>`</span>)\n  },\n}\n\nobj.<span class=\"hljs-title function_\">methodFunction</span>()\nobj.<span class=\"hljs-title function_\">arrowFunc</span>()\n</code></pre>\n<p>This example will give the result:</p>\n<pre><code class=\"hljs language-text\">key1 from methodFunction: value1\nkey1 from internalArrowFunc: value1\nkey1 from arrowFunc: undefined\n</code></pre>\n<h2>Iterating Over Object</h2>\n<p>With <code>for ... in</code> loop is possible to iterate over all object keys:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> obj = {\n  <span class=\"hljs-attr\">key1</span>: <span class=\"hljs-string\">\"value1\"</span>,\n  <span class=\"hljs-attr\">key2</span>: <span class=\"hljs-string\">\"value2\"</span>,\n  <span class=\"hljs-attr\">key3</span>: <span class=\"hljs-string\">\"value3\"</span>,\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> obj) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`key: <span class=\"hljs-subst\">${key}</span> => <span class=\"hljs-subst\">${obj[key]}</span>`</span>)\n}\n</code></pre>\n<h2>Plan</h2>\n<ul>\n  <li>object destructuring</li>\n  <li>spread operator and Object.assign</li>\n</ul>\n<h2>References</h2>\n<ul>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">MDN Primitive</a></li>\n</ul>\n"}},"__N_SSG":true}