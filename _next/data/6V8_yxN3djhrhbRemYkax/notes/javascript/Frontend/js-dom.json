{"pageProps":{"noteKey":["javascript","Frontend","js-dom"],"note":{"title":"JS - DOM","date":"2022-03-24","content":"\n<p><code>element nodes</code> are an objects which in assembly compose <code>Document Object Model</code> or <code>DOM</code>.</p>\n<p>\n  <code>html</code> elements are element nodes, simple text is a <code>text node</code>. <code>html attributes</code> also create\n  attribute nodes.\n</p>\n<p>Element nodes contain properties and methods, which may be interacted with JavaScript.</p>\n<h2>Querying DOM Elements</h2>\n<p>\n  The most basic and generic way to get <code>DOM</code> element from <code>html</code> page is <code>querySelector(&#x3C;query>)</code>,\n  which returns single element and <code>querySelectorAll(&#x3C;query>)</code> which returns collection of elements.\n</p>\n<p><code>&#x3C;query></code> has a special syntax, similar to <code>css</code> elements syntax:</p>\n<ul>\n  <li>To get element by it's class name <code>.class-name</code></li>\n  <li>To get element by it's id <code>#element-id-name</code></li>\n  <li>To get element by it's tag <code>tag-name</code></li>\n</ul>\n<p>\n  But this is not limited to simple tag/class/id, actually <code>querySelector</code> may receive more complex\n  css element queries, like:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> $firstListElem = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"ul li:first-child\"</span>)\n</code></pre>\n<p>These <code>querySelectorAll</code> method, which returns collection of <code>DOM</code> nodes return <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\">NodeList</a>, which is a data structure, similar to array, but it is not an actual array.</p>\n<p>There are more specific method for retrieving elements.</p>\n<p>To get elements by it's <code>id</code> there is <code>getElementById()</code>, which returns single element.</p>\n<p>It is also possible to get group of elements by their <code>tag</code> name - <code>getElementsByTagName(&#x3C;tag_nam>)</code></p>\n<p><code>getElementsByClassName(&#x3C;class-name>)</code> - returns collection of nodes, found by given class name.</p>\n<h2>Traversing DOM</h2>\n<p>To traverse the <code>DOM</code> there are a bunch of methods on node:</p>\n<ul>\n  <li><code>parentNode</code> - get parent of current node.</li>\n  <li><code>nextSibling</code> - get next sibling on the same level.</li>\n  <li><code>previousSibling</code> - get previous sibling on the same level.</li>\n  <li><code>firstChild</code> - get first child of this element.</li>\n  <li><code>lastChild</code> - get last child of this element.</li>\n  <li><code>childNodes</code> - get collection of all element's children including text nodes.</li>\n  <li><code>children</code> - get children element nodes without text nodes</li>\n</ul>\n<h2>Modification Of DOM Elements</h2>\n<ul>\n  <li>\n    <p><code>element.innerHTML</code> - allows to get or set inner content of current element</p>\n    <pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>li - 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>li - 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>li - 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n</code></pre>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> $list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"ul\"</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>($list.<span class=\"hljs-property\">innerHTML</span>)\n<span class=\"hljs-comment\">// &#x3C;li>li - 1&#x3C;/li></span>\n<span class=\"hljs-comment\">// &#x3C;li>li - 2&#x3C;/li></span>\n<span class=\"hljs-comment\">// &#x3C;li>li - 3&#x3C;/li></span>\n</code></pre>\n  </li>\n  <li>\n    <p><code>element.innerText</code> - allows to get or set internal text content of given element and all it's children:</p>\n    <pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>li - 1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>li - 2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>li - 3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n</code></pre>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> $list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"ul\"</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>($list.<span class=\"hljs-property\">innerText</span>)\n<span class=\"hljs-comment\">// li - 1</span>\n<span class=\"hljs-comment\">// li - 2</span>\n<span class=\"hljs-comment\">// li - 3</span>\n</code></pre>\n  </li>\n  <li>\n    <p>\n      <code>element.insertAdjacentHTML(position, value)</code> - inserts html content on specified position inside of\n      source element. Where <code>position</code> may be:\n    </p>\n    <ul>\n      <li><code>beforebegin</code> - before the element. In this case source element should have parent.</li>\n      <li><code>afterbegin</code> - as a first child</li>\n      <li><code>beforeend</code> - as a last child</li>\n      <li><code>afterend</code> - after the source element(which should have a parent)</li>\n    </ul>\n  </li>\n  <li>\n    <p>\n      <code>element.style</code> - object, which contains style css properties, assigned to this element.\n      <em>Important to notice: name of style attribute in js will be transformed to camel case, e.g. <code>background-color</code> -> <code>backgroundColor</code></em>\n    </p>\n  </li>\n  <li>\n    <p><code>element.getAttribute(&#x3C;attribute-name>)</code> - allows to get html attribute value</p>\n  </li>\n  <li>\n    <p><code>element.setAttribute(&#x3C;attribute-name>, &#x3C;value>)</code> - allows to change node attribute value</p>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> $input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">\"text-input\"</span>)\n<span class=\"hljs-keyword\">const</span> inputValue = $input.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">\"value\"</span>)\n$input.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">\"value\"</span>, <span class=\"hljs-string\">\"new text\"</span>)\n</code></pre>\n  </li>\n  <li>\n    <p><code>element.removeAttribute(&#x3C;attribute-name>)</code> - remove node attribute</p>\n  </li>\n  <li>\n    <p><code>document.createElement(&#x3C;tag-name>)</code> - creates new element node of given html tag</p>\n    <p><em>Note: this method is always called on <code>document</code> object and not on any other node element</em></p>\n  </li>\n  <li>\n    <p><code>element.appendChild(&#x3C;child>)</code> - insert given element to target element children</p>\n  </li>\n  <li>\n    <p><code>element.lastElementChild</code> - selects last child of element</p>\n    <ul>\n      <li><code>before</code> - selects element before this</li>\n      <li><code>after</code> - selects element after this</li>\n      <li><code>replaceWith()</code> - replace this element with new provided</li>\n    </ul>\n  </li>\n  <li>\n    <p><code>element.insertBefore(&#x3C;element>)</code> - insert given element before target element as a sibling</p>\n  </li>\n  <li>\n    <p><code>element.replaceChild(newElement, oldElement)</code> - insert <code>newElement</code> instead of <code>oldElement</code></p>\n  </li>\n  <li>\n    <p><code>element.remove()</code> - removes element from DOM</p>\n  </li>\n</ul>\n"}},"__N_SSG":true}