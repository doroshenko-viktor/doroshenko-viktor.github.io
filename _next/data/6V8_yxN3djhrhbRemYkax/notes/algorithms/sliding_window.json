{"pageProps":{"noteKey":["algorithms","sliding_window"],"note":{"title":"Sliding Window","date":"2025-10-15","content":"\n<h2>What is Sliding Window?</h2>\n<p>Sliding window is an optimization technique for solving problems involving <strong>contiguous sequences</strong> (subarrays or substrings). Instead of recalculating everything for each potential solution, we \"slide\" a window across the data structure and adjust our calculation incrementally.</p>\n<h3>The Core Idea</h3>\n<p><strong>Without Sliding Window (Naive):</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Find max sum of k consecutive elements</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxSum_Naive</span>(<span class=\"hljs-params\">arr, k</span>):\n    max_sum = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">'-inf'</span>)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(arr) - k + <span class=\"hljs-number\">1</span>):\n        current_sum = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i, i + k):\n            current_sum += arr[j]\n        max_sum = <span class=\"hljs-built_in\">max</span>(max_sum, current_sum)\n\n    <span class=\"hljs-keyword\">return</span> max_sum\n\n<span class=\"hljs-comment\"># Time: O(n * k) - recalculate sum for each window</span>\n</code></pre>\n<p><strong>With Sliding Window (Optimized):</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Find max sum of k consecutive elements</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxSum_SlidingWindow</span>(<span class=\"hljs-params\">arr, k</span>):\n    window_sum = <span class=\"hljs-built_in\">sum</span>(arr[:k])\n    max_sum = window_sum\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(k, <span class=\"hljs-built_in\">len</span>(arr)):\n        window_sum = window_sum - arr[i-k] + arr[i]\n        max_sum = <span class=\"hljs-built_in\">max</span>(max_sum, window_sum)\n\n    <span class=\"hljs-keyword\">return</span> max_sum\n\n<span class=\"hljs-comment\"># Time: O(n) - reuse previous calculation</span>\n</code></pre>\n<p><strong>Key Insight:</strong> Instead of recalculating the entire window, we remove the element leaving the window and add the new element entering it.</p>\n<hr>\n<h2>Why Use Sliding Window?</h2>\n<h3>Performance Improvement</h3>\n<table>\n  <thead>\n    <tr>\n      <th>Approach</th>\n      <th>Time Complexity</th>\n      <th>Example (n=10000, k=100)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Naive (nested loops)</td>\n      <td>O(n × k)</td>\n      <td>~1,000,000 operations</td>\n    </tr>\n    <tr>\n      <td>Sliding Window</td>\n      <td>O(n)</td>\n      <td>~10,000 operations</td>\n    </tr>\n  </tbody>\n</table>\n<h3>When to Use</h3>\n<p>✅ <strong>Use Sliding Window when:</strong></p>\n<ul>\n  <li>Problem involves <strong>contiguous</strong> subarrays/substrings</li>\n  <li>Looking for longest/shortest/count with a condition</li>\n  <li>Keywords: \"substring\", \"subarray\", \"consecutive\", \"window\", \"in a row\"</li>\n  <li>You can determine validity from current window alone</li>\n</ul>\n<p>❌ <strong>Don't use Sliding Window when:</strong></p>\n<ul>\n  <li>Elements can be picked from anywhere (not contiguous)</li>\n  <li>\"Subsequence\" problems (can skip elements)</li>\n  <li>Need global information beyond current window</li>\n  <li>Requires sorting or complex preprocessing</li>\n</ul>\n<hr>\n<h2>The Mental Model</h2>\n<h3>Visualization</h3>\n<p>Imagine a physical window sliding across an array:</p>\n<pre><code class=\"hljs language-ini\">Array: <span class=\"hljs-section\">[1, 4, 2, 10, 23, 3, 1, 0, 20]</span>\nWindow <span class=\"hljs-attr\">size</span> = <span class=\"hljs-number\">3</span>\n\nPosition 1:  <span class=\"hljs-section\">[1, 4, 2]</span>, 10, 23, 3, 1, 0, 20\n             └─────┘\n\nPosition 2:  1, <span class=\"hljs-section\">[4, 2, 10]</span>, 23, 3, 1, 0, 20\n                └───────┘\n                Remove 1, Add 10\n\nPosition 3:  1, 4, <span class=\"hljs-section\">[2, 10, 23]</span>, 3, 1, 0, 20\n                   └────────┘\n                   Remove 4, Add 23\n</code></pre>\n<h3>The Pointer Dance</h3>\n<pre><code class=\"hljs language-sql\">Fixed <span class=\"hljs-keyword\">Window</span>:\n  <span class=\"hljs-keyword\">right</span> pointer moves → <span class=\"hljs-keyword\">left</span> pointer follows <span class=\"hljs-keyword\">at</span> fixed distance\n\nVariable <span class=\"hljs-keyword\">Window</span>:\n  <span class=\"hljs-keyword\">right</span> pointer always moves forward (expand)\n  <span class=\"hljs-keyword\">left</span> pointer moves forward <span class=\"hljs-keyword\">when</span> needed (shrink)\n</code></pre>\n<hr>\n<h2>Two Categories</h2>\n<h3>Category 1: Fixed-Size Window</h3>\n<p><strong>Characteristics:</strong></p>\n<ul>\n  <li>Window size K is given</li>\n  <li>Simply slide the window and compute</li>\n  <li>Usually easier</li>\n</ul>\n<p><strong>Template:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fixed_window</span>(<span class=\"hljs-params\">arr, k</span>):\n    <span class=\"hljs-comment\"># Step 1: Calculate first window</span>\n    window_state = calculate_initial(arr[:k])\n    result = window_state\n\n    <span class=\"hljs-comment\"># Step 2: Slide window</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(k, <span class=\"hljs-built_in\">len</span>(arr)):\n        <span class=\"hljs-comment\"># Remove left element, add right element</span>\n        window_state = adjust(window_state, remove=arr[i-k], add=arr[i])\n        result = update_result(result, window_state)\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<h3>Category 2: Variable-Size Window</h3>\n<p><strong>Characteristics:</strong></p>\n<ul>\n  <li>Window size changes dynamically</li>\n  <li>Find optimal window size</li>\n  <li>Uses two pointers (left and right)</li>\n  <li>More complex but very powerful</li>\n</ul>\n<p><strong>Template:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">variable_window</span>(<span class=\"hljs-params\">arr</span>):\n    left = <span class=\"hljs-number\">0</span>\n    window_state = initialize()\n    result = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(arr)):\n        <span class=\"hljs-comment\"># Expand: add arr[right]</span>\n        add_to_window(arr[right])\n\n        <span class=\"hljs-comment\"># Shrink: while invalid</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> is_valid(window_state):\n            remove_from_window(arr[left])\n            left += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Update result</span>\n        result = update(result, right - left + <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<hr>\n<h2>Fixed-Size Window Problems</h2>\n<h3>Problem 1: Maximum Sum Subarray of Size K</h3>\n<p>\n  <strong>Problem:</strong>\n  Given an array and integer k, find the maximum sum of any k consecutive elements.\n</p>\n<pre><code class=\"hljs language-ini\">Input: <span class=\"hljs-attr\">arr</span> = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>], k = <span class=\"hljs-number\">3</span>\nOutput: 9\nExplanation: <span class=\"hljs-section\">[5, 1, 3]</span> has sum 9\n</code></pre>\n<p><strong>Solution:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxSumSubarray</span>(<span class=\"hljs-params\">arr, k</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) &#x3C; k:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># Calculate first window</span>\n    window_sum = <span class=\"hljs-built_in\">sum</span>(arr[:k])\n    max_sum = window_sum\n\n    <span class=\"hljs-comment\"># Slide window</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(k, <span class=\"hljs-built_in\">len</span>(arr)):\n        <span class=\"hljs-comment\"># Remove leftmost, add rightmost</span>\n        window_sum = window_sum - arr[i-k] + arr[i]\n        max_sum = <span class=\"hljs-built_in\">max</span>(max_sum, window_sum)\n\n    <span class=\"hljs-keyword\">return</span> max_sum\n</code></pre>\n<p><strong>Trace:</strong></p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">arr</span> = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>], k = <span class=\"hljs-number\">3</span>\n\nWindow 1: <span class=\"hljs-section\">[2, 1, 5]</span> → <span class=\"hljs-attr\">sum</span> = <span class=\"hljs-number\">8</span>\nWindow 2: <span class=\"hljs-section\">[1, 5, 1]</span> → <span class=\"hljs-attr\">sum</span> = <span class=\"hljs-number\">7</span>  (<span class=\"hljs-number\">8</span> - <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>)\nWindow 3: <span class=\"hljs-section\">[5, 1, 3]</span> → <span class=\"hljs-attr\">sum</span> = <span class=\"hljs-number\">9</span>  (<span class=\"hljs-number\">7</span> - <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">3</span>) ✓ max\nWindow 4: <span class=\"hljs-section\">[1, 3, 2]</span> → <span class=\"hljs-attr\">sum</span> = <span class=\"hljs-number\">6</span>  (<span class=\"hljs-number\">9</span> - <span class=\"hljs-number\">5</span> + <span class=\"hljs-number\">2</span>)\n\nResult: 9\n</code></pre>\n<p><strong>Time:</strong> O(n), <strong>Space:</strong> O(1)</p>\n<hr>\n<h3>Problem 2: First Negative Number in Every Window</h3>\n<p>\n  <strong>Problem:</strong>\n  For each window of size k, find the first negative number.\n</p>\n<pre><code class=\"hljs language-ini\">Input: <span class=\"hljs-attr\">arr</span> = [<span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, -<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">28</span>], k = <span class=\"hljs-number\">3</span>\nOutput: <span class=\"hljs-section\">[-1, -1, -7, -15, -15, 0]</span>\n</code></pre>\n<p><strong>Solution:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> deque\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">firstNegativeInWindow</span>(<span class=\"hljs-params\">arr, k</span>):\n    result = []\n    negatives = deque()  <span class=\"hljs-comment\"># stores indices of negative numbers</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(arr)):\n        <span class=\"hljs-comment\"># Add negative numbers to deque</span>\n        <span class=\"hljs-keyword\">if</span> arr[i] &#x3C; <span class=\"hljs-number\">0</span>:\n            negatives.append(i)\n\n        <span class=\"hljs-comment\"># Remove elements outside current window</span>\n        <span class=\"hljs-keyword\">while</span> negatives <span class=\"hljs-keyword\">and</span> negatives[<span class=\"hljs-number\">0</span>] &#x3C; i - k + <span class=\"hljs-number\">1</span>:\n            negatives.popleft()\n\n        <span class=\"hljs-comment\"># If window is complete (i >= k-1)</span>\n        <span class=\"hljs-keyword\">if</span> i >= k - <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">if</span> negatives:\n                result.append(arr[negatives[<span class=\"hljs-number\">0</span>]])\n            <span class=\"hljs-keyword\">else</span>:\n                result.append(<span class=\"hljs-number\">0</span>)\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<p><strong>Key Insight:</strong> Use a deque to track negative numbers and remove those outside the window.</p>\n<p><strong>Time:</strong> O(n), <strong>Space:</strong> O(k)</p>\n<hr>\n<h3>Problem 3: Count Anagrams in String</h3>\n<p>\n  <strong>Problem:</strong>\n  Count how many anagrams of a pattern exist as substrings in text.\n</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">Input:</span> <span class=\"hljs-keyword\">text</span> = <span class=\"hljs-string\">\"forxxorfxdofr\"</span>, pattern = <span class=\"hljs-string\">\"for\"</span>\n<span class=\"hljs-symbol\">Output:</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-symbol\">Explanation:</span> <span class=\"hljs-string\">\"for\"</span>, <span class=\"hljs-string\">\"orf\"</span>, <span class=\"hljs-string\">\"ofr\"</span> are anagrams <span class=\"hljs-keyword\">of</span> <span class=\"hljs-string\">\"for\"</span>\n</code></pre>\n<p><strong>Solution:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">countAnagrams</span>(<span class=\"hljs-params\">text, pattern</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(pattern) > <span class=\"hljs-built_in\">len</span>(text):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    pattern_count = Counter(pattern)\n    window_count = Counter()\n    k = <span class=\"hljs-built_in\">len</span>(pattern)\n    count = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(text)):\n        <span class=\"hljs-comment\"># Add character to window</span>\n        window_count[text[i]] += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Remove character outside window</span>\n        <span class=\"hljs-keyword\">if</span> i >= k:\n            left_char = text[i - k]\n            window_count[left_char] -= <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> window_count[left_char] == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">del</span> window_count[left_char]\n\n        <span class=\"hljs-comment\"># Check if current window is anagram</span>\n        <span class=\"hljs-keyword\">if</span> i >= k - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> window_count == pattern_count:\n            count += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> count\n</code></pre>\n<p><strong>Key Insight:</strong> Two Counters are equal if they have the same characters with the same frequencies.</p>\n<p><strong>Time:</strong> O(n), <strong>Space:</strong> O(1) - at most 26 characters for lowercase English</p>\n<hr>\n<h3>Problem 4: Maximum of All Subarrays of Size K</h3>\n<p>\n  <strong>Problem:</strong>\n  Find the maximum element in each window of size k.\n</p>\n<pre><code class=\"hljs language-ini\">Input: <span class=\"hljs-attr\">arr</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>], k = <span class=\"hljs-number\">3</span>\nOutput: <span class=\"hljs-section\">[3, 3, 5, 5, 6, 7]</span>\n</code></pre>\n<p><strong>Solution (Using Deque - Monotonic Queue):</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> deque\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxSlidingWindow</span>(<span class=\"hljs-params\">arr, k</span>):\n    result = []\n    dq = deque()  <span class=\"hljs-comment\"># stores indices, maintains decreasing order</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(arr)):\n        <span class=\"hljs-comment\"># Remove elements outside window</span>\n        <span class=\"hljs-keyword\">while</span> dq <span class=\"hljs-keyword\">and</span> dq[<span class=\"hljs-number\">0</span>] &#x3C; i - k + <span class=\"hljs-number\">1</span>:\n            dq.popleft()\n\n        <span class=\"hljs-comment\"># Remove smaller elements (they'll never be max)</span>\n        <span class=\"hljs-keyword\">while</span> dq <span class=\"hljs-keyword\">and</span> arr[dq[-<span class=\"hljs-number\">1</span>]] &#x3C; arr[i]:\n            dq.pop()\n\n        dq.append(i)\n\n        <span class=\"hljs-comment\"># Add to result when window is complete</span>\n        <span class=\"hljs-keyword\">if</span> i >= k - <span class=\"hljs-number\">1</span>:\n            result.append(arr[dq[<span class=\"hljs-number\">0</span>]])\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<p><strong>Key Insight:</strong> Maintain a deque in decreasing order - the front always has the maximum.</p>\n<p><strong>Time:</strong> O(n), <strong>Space:</strong> O(k)</p>\n<hr>\n<h2>Variable-Size Window Problems</h2>\n<h3>Problem 5: Longest Substring Without Repeating Characters</h3>\n<p>\n  <strong>Problem:</strong>\n  Find the length of the longest substring without repeating characters.\n</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">Input:</span> s = <span class=\"hljs-string\">\"abcabcbb\"</span>\n<span class=\"hljs-symbol\">Output:</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-symbol\">Explanation:</span> <span class=\"hljs-string\">\"abc\"</span> <span class=\"hljs-built_in\">is</span> the longest substring\n</code></pre>\n<p><strong>Solution:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lengthOfLongestSubstring</span>(<span class=\"hljs-params\">s</span>):\n    char_set = <span class=\"hljs-built_in\">set</span>()\n    left = <span class=\"hljs-number\">0</span>\n    max_length = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s)):\n        <span class=\"hljs-comment\"># Shrink window while duplicate exists</span>\n        <span class=\"hljs-keyword\">while</span> s[right] <span class=\"hljs-keyword\">in</span> char_set:\n            char_set.remove(s[left])\n            left += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Add current character</span>\n        char_set.add(s[right])\n        max_length = <span class=\"hljs-built_in\">max</span>(max_length, right - left + <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> max_length\n</code></pre>\n<p><strong>Detailed Trace:</strong></p>\n<pre><code class=\"hljs language-sql\">s <span class=\"hljs-operator\">=</span> \"abcabcbb\"\n\n<span class=\"hljs-keyword\">right</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>, <span class=\"hljs-type\">char</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'a'</span>: <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'a'</span>}, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>, length<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">right</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span>, <span class=\"hljs-type\">char</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'b'</span>: <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>}, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>, length<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">right</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span>, <span class=\"hljs-type\">char</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'c'</span>: <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>}, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>, length<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">right</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>, <span class=\"hljs-type\">char</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'a'</span>:\n  <span class=\"hljs-string\">'a'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">!</span> Remove <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>}\n  <span class=\"hljs-keyword\">Add</span> <span class=\"hljs-string\">'a'</span>: <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>,<span class=\"hljs-string\">'a'</span>}, length<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">right</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">4</span>, <span class=\"hljs-type\">char</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'b'</span>:\n  <span class=\"hljs-string\">'b'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">!</span> Remove <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span>, <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'c'</span>,<span class=\"hljs-string\">'a'</span>}\n  <span class=\"hljs-keyword\">Add</span> <span class=\"hljs-string\">'b'</span>: <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'c'</span>,<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>}, length<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">right</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">5</span>, <span class=\"hljs-type\">char</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'c'</span>:\n  <span class=\"hljs-string\">'c'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">!</span> Remove <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>, <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>}\n  <span class=\"hljs-keyword\">Add</span> <span class=\"hljs-string\">'c'</span>: <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>}, length<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">right</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">6</span>, <span class=\"hljs-type\">char</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'b'</span>:\n  <span class=\"hljs-string\">'b'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">!</span> Remove <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">4</span>, <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>}\n  <span class=\"hljs-string\">'b'</span> still <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">!</span> Remove <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">5</span>, <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'c'</span>}\n  <span class=\"hljs-keyword\">Add</span> <span class=\"hljs-string\">'b'</span>: <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'c'</span>,<span class=\"hljs-string\">'b'</span>}, length<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">right</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">7</span>, <span class=\"hljs-type\">char</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'b'</span>:\n  <span class=\"hljs-string\">'b'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">!</span> Remove <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">6</span>, <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'b'</span>}\n  <span class=\"hljs-string\">'b'</span> still <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">!</span> Remove <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-keyword\">left</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">7</span>, <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{}\n  <span class=\"hljs-keyword\">Add</span> <span class=\"hljs-string\">'b'</span>: <span class=\"hljs-keyword\">set</span><span class=\"hljs-operator\">=</span>{<span class=\"hljs-string\">'b'</span>}, length<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span>\n\nMax length <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<p><strong>Time:</strong> O(n), <strong>Space:</strong> O(min(n, m)) where m is charset size</p>\n<hr>\n<h3>Problem 6: Longest Substring with At Most K Distinct Characters</h3>\n<p>\n  <strong>Problem:</strong>\n  Find the length of the longest substring with at most k distinct characters.\n</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">Input:</span> s = <span class=\"hljs-string\">\"eceba\"</span>, k = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-symbol\">Output:</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-symbol\">Explanation:</span> <span class=\"hljs-string\">\"ece\"</span> has <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">distinct</span> characters\n</code></pre>\n<p><strong>Solution:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lengthOfLongestSubstringKDistinct</span>(<span class=\"hljs-params\">s, k</span>):\n    <span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    char_count = {}\n    left = <span class=\"hljs-number\">0</span>\n    max_length = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s)):\n        <span class=\"hljs-comment\"># Expand: add s[right]</span>\n        char_count[s[right]] = char_count.get(s[right], <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Shrink: while too many distinct characters</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(char_count) > k:\n            char_count[s[left]] -= <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> char_count[s[left]] == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">del</span> char_count[s[left]]\n            left += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Update max length</span>\n        max_length = <span class=\"hljs-built_in\">max</span>(max_length, right - left + <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> max_length\n</code></pre>\n<p><strong>Key Insight:</strong> Track character counts, shrink when distinct count exceeds k.</p>\n<p><strong>Time:</strong> O(n), <strong>Space:</strong> O(k)</p>\n<hr>\n<h3>Problem 7: Minimum Window Substring</h3>\n<p>\n  <strong>Problem:</strong>\n  Find the minimum window in s that contains all characters of t.\n</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">Input:</span> s = <span class=\"hljs-string\">\"ADOBECODEBANC\"</span>, t = <span class=\"hljs-string\">\"ABC\"</span>\n<span class=\"hljs-symbol\">Output:</span> <span class=\"hljs-string\">\"BANC\"</span>\n</code></pre>\n<p><strong>Solution:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minWindow</span>(<span class=\"hljs-params\">s, t</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> s <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> t <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(s) &#x3C; <span class=\"hljs-built_in\">len</span>(t):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>\n\n    need = Counter(t)\n    have = {}\n\n    left = <span class=\"hljs-number\">0</span>\n    min_len = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">'inf'</span>)\n    min_start = <span class=\"hljs-number\">0</span>\n    matched = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># number of character types fully matched</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s)):\n        char = s[right]\n        have[char] = have.get(char, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># If this character's requirement is satisfied</span>\n        <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">in</span> need <span class=\"hljs-keyword\">and</span> have[char] == need[char]:\n            matched += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Try to shrink window while valid</span>\n        <span class=\"hljs-keyword\">while</span> matched == <span class=\"hljs-built_in\">len</span>(need):\n            <span class=\"hljs-comment\"># Update minimum</span>\n            <span class=\"hljs-keyword\">if</span> right - left + <span class=\"hljs-number\">1</span> &#x3C; min_len:\n                min_len = right - left + <span class=\"hljs-number\">1</span>\n                min_start = left\n\n            <span class=\"hljs-comment\"># Shrink from left</span>\n            left_char = s[left]\n            have[left_char] -= <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> left_char <span class=\"hljs-keyword\">in</span> need <span class=\"hljs-keyword\">and</span> have[left_char] &#x3C; need[left_char]:\n                matched -= <span class=\"hljs-number\">1</span>\n\n            left += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-keyword\">if</span> min_len == <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">'inf'</span>) <span class=\"hljs-keyword\">else</span> s[min_start:min_start + min_len]\n</code></pre>\n<p><strong>Detailed Trace:</strong></p>\n<pre><code class=\"hljs language-ini\"><span class=\"hljs-attr\">s</span> = <span class=\"hljs-string\">\"ADOBECODEBANC\"</span>, t = <span class=\"hljs-string\">\"ABC\"</span>\n<span class=\"hljs-attr\">need</span> = {<span class=\"hljs-string\">'A'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'B'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'C'</span>: <span class=\"hljs-number\">1</span>}\n\nExpand to \"ADOBEC\":\n  <span class=\"hljs-attr\">have</span> = {<span class=\"hljs-string\">'A'</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'D'</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'O'</span>:<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'B'</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'E'</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'C'</span>:<span class=\"hljs-number\">1</span>}\n  <span class=\"hljs-attr\">matched</span> = <span class=\"hljs-number\">3</span> ✓ (all requirements met)\n  <span class=\"hljs-attr\">min_window</span> = <span class=\"hljs-string\">\"ADOBEC\"</span> (length <span class=\"hljs-number\">6</span>)\n\nShrink:\n  Remove 'A': <span class=\"hljs-attr\">matched</span> = <span class=\"hljs-number\">2</span> (lost A requirement)\n\nContinue expanding...\nEventually find \"BANC\" (length 4) ✓\n</code></pre>\n<p><strong>Key Insight:</strong> Use <code>matched</code> counter to quickly check if window is valid.</p>\n<p><strong>Time:</strong> O(n + m), <strong>Space:</strong> O(1) - at most 52 English letters</p>\n<hr>\n<h3>Problem 8: Longest Repeating Character Replacement</h3>\n<p>\n  <strong>Problem:</strong>\n  Find the longest substring with same character after replacing at most k characters.\n</p>\n<pre><code class=\"hljs language-sql\">Input: s <span class=\"hljs-operator\">=</span> \"AABABBA\", k <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\nOutput: <span class=\"hljs-number\">4</span>\nExplanation: Replace <span class=\"hljs-keyword\">one</span> <span class=\"hljs-string\">'A'</span> <span class=\"hljs-keyword\">in</span> \"AABA\" <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">get</span> \"AAAA\"\n</code></pre>\n<p><strong>Solution:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">characterReplacement</span>(<span class=\"hljs-params\">s, k</span>):\n    char_count = {}\n    left = <span class=\"hljs-number\">0</span>\n    max_length = <span class=\"hljs-number\">0</span>\n    max_freq = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># frequency of most common char in window</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s)):\n        <span class=\"hljs-comment\"># Add character to window</span>\n        char_count[s[right]] = char_count.get(s[right], <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>\n        max_freq = <span class=\"hljs-built_in\">max</span>(max_freq, char_count[s[right]])\n\n        <span class=\"hljs-comment\"># Window size - most frequent char > k replacements</span>\n        <span class=\"hljs-comment\"># This means we need more than k replacements to make all chars same</span>\n        <span class=\"hljs-keyword\">while</span> (right - left + <span class=\"hljs-number\">1</span>) - max_freq > k:\n            char_count[s[left]] -= <span class=\"hljs-number\">1</span>\n            left += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-comment\"># Note: we don't update max_freq here (optimization)</span>\n\n        max_length = <span class=\"hljs-built_in\">max</span>(max_length, right - left + <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> max_length\n</code></pre>\n<p><strong>Key Insight:</strong></p>\n<ul>\n  <li>Window is valid if: <code>window_size - max_frequency &#x3C;= k</code></li>\n  <li>We can replace the non-most-frequent characters</li>\n</ul>\n<p><strong>Time:</strong> O(n), <strong>Space:</strong> O(1) - at most 26 letters</p>\n<hr>\n<h3>Problem 9: Permutation in String</h3>\n<p>\n  <strong>Problem:</strong>\n  Check if s2 contains a permutation of s1.\n</p>\n<pre><code class=\"hljs language-vbnet\"><span class=\"hljs-symbol\">Input:</span> s1 = <span class=\"hljs-string\">\"ab\"</span>, s2 = <span class=\"hljs-string\">\"eidbaooo\"</span>\n<span class=\"hljs-symbol\">Output:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-symbol\">Explanation:</span> s2 contains <span class=\"hljs-string\">\"ba\"</span> which <span class=\"hljs-built_in\">is</span> a permutation <span class=\"hljs-keyword\">of</span> <span class=\"hljs-string\">\"ab\"</span>\n</code></pre>\n<p><strong>Solution:</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">checkInclusion</span>(<span class=\"hljs-params\">s1, s2</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s1) > <span class=\"hljs-built_in\">len</span>(s2):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    s1_count = Counter(s1)\n    window_count = Counter(s2[:<span class=\"hljs-built_in\">len</span>(s1)])\n\n    <span class=\"hljs-keyword\">if</span> s1_count == window_count:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s1), <span class=\"hljs-built_in\">len</span>(s2)):\n        <span class=\"hljs-comment\"># Add new character</span>\n        window_count[s2[i]] += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Remove old character</span>\n        left_char = s2[i - <span class=\"hljs-built_in\">len</span>(s1)]\n        window_count[left_char] -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> window_count[left_char] == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">del</span> window_count[left_char]\n\n        <span class=\"hljs-comment\"># Check if window matches</span>\n        <span class=\"hljs-keyword\">if</span> s1_count == window_count:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n</code></pre>\n<p><strong>Key Insight:</strong> This is actually a fixed-size window problem! Window size = len(s1).</p>\n<p><strong>Time:</strong> O(n), <strong>Space:</strong> O(1)</p>\n<hr>\n<h2>Advanced Patterns</h2>\n<h3>Pattern 1: Sliding Window + Two Pointers</h3>\n<p><strong>Problem: Container With Most Water</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxArea</span>(<span class=\"hljs-params\">height</span>):\n    <span class=\"hljs-string\">\"\"\"\n    Not a typical sliding window, but uses two-pointer technique.\n    Find two lines that form the largest container.\n    \"\"\"</span>\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(height) - <span class=\"hljs-number\">1</span>\n    max_water = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">while</span> left &#x3C; right:\n        width = right - left\n        h = <span class=\"hljs-built_in\">min</span>(height[left], height[right])\n        max_water = <span class=\"hljs-built_in\">max</span>(max_water, width * h)\n\n        <span class=\"hljs-comment\"># Move pointer with smaller height</span>\n        <span class=\"hljs-keyword\">if</span> height[left] &#x3C; height[right]:\n            left += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            right -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> max_water\n</code></pre>\n<hr>\n<h3>Pattern 2: At Most K → Exactly K</h3>\n<p><strong>Trick:</strong> <code>exactly(K) = atMost(K) - atMost(K-1)</code></p>\n<p><strong>Problem: Subarrays with K Different Integers</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">subarraysWithKDistinct</span>(<span class=\"hljs-params\">nums, k</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">atMostK</span>(<span class=\"hljs-params\">k</span>):\n        count = {}\n        left = <span class=\"hljs-number\">0</span>\n        result = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(nums)):\n            count[nums[right]] = count.get(nums[right], <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>\n\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(count) > k:\n                count[nums[left]] -= <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-keyword\">if</span> count[nums[left]] == <span class=\"hljs-number\">0</span>:\n                    <span class=\"hljs-keyword\">del</span> count[nums[left]]\n                left += <span class=\"hljs-number\">1</span>\n\n            <span class=\"hljs-comment\"># All subarrays ending at right</span>\n            result += right - left + <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">return</span> result\n\n    <span class=\"hljs-keyword\">return</span> atMostK(k) - atMostK(k - <span class=\"hljs-number\">1</span>)\n</code></pre>\n<p><strong>Key Insight:</strong> For each position, <code>right - left + 1</code> subarrays end at that position.</p>\n<hr>\n<h3>Pattern 3: Sliding Window with Constraints</h3>\n<p><strong>Problem: Max Consecutive Ones III</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">longestOnes</span>(<span class=\"hljs-params\">nums, k</span>):\n    <span class=\"hljs-string\">\"\"\"\n    Find longest subarray of 1s after flipping at most k zeros.\n    \"\"\"</span>\n    left = <span class=\"hljs-number\">0</span>\n    zeros = <span class=\"hljs-number\">0</span>\n    max_length = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(nums)):\n        <span class=\"hljs-keyword\">if</span> nums[right] == <span class=\"hljs-number\">0</span>:\n            zeros += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Shrink if too many zeros</span>\n        <span class=\"hljs-keyword\">while</span> zeros > k:\n            <span class=\"hljs-keyword\">if</span> nums[left] == <span class=\"hljs-number\">0</span>:\n                zeros -= <span class=\"hljs-number\">1</span>\n            left += <span class=\"hljs-number\">1</span>\n\n        max_length = <span class=\"hljs-built_in\">max</span>(max_length, right - left + <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> max_length\n</code></pre>\n<hr>\n<h3>Pattern 4: Sliding Window with Product</h3>\n<p><strong>Problem: Subarray Product Less Than K</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">numSubarrayProductLessThanK</span>(<span class=\"hljs-params\">nums, k</span>):\n    <span class=\"hljs-string\">\"\"\"\n    Count subarrays where product &#x3C; k.\n    \"\"\"</span>\n    <span class=\"hljs-keyword\">if</span> k &#x3C;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    product = <span class=\"hljs-number\">1</span>\n    left = <span class=\"hljs-number\">0</span>\n    count = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(nums)):\n        product *= nums[right]\n\n        <span class=\"hljs-comment\"># Shrink while product >= k</span>\n        <span class=\"hljs-keyword\">while</span> product >= k:\n            product //= nums[left]\n            left += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Add all subarrays ending at right</span>\n        count += right - left + <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> count\n</code></pre>\n<p><strong>Key Insight:</strong> When window [left, right] is valid, it contributes <code>right - left + 1</code> subarrays.</p>\n<hr>\n<h2>Pattern Recognition</h2>\n<h3>Decision Tree</h3>\n<pre><code class=\"hljs language-sql\">Does the problem involve contiguous elements?\n  └─ <span class=\"hljs-keyword\">NO</span> → <span class=\"hljs-keyword\">Not</span> sliding <span class=\"hljs-keyword\">window</span> (try hash map, two pointers, etc.)\n  └─ YES → Continue\n\n<span class=\"hljs-keyword\">Is</span> the <span class=\"hljs-keyword\">window</span> size fixed?\n  └─ YES → Fixed<span class=\"hljs-operator\">-</span>size sliding <span class=\"hljs-keyword\">window</span>\n      ├─ Initialize <span class=\"hljs-keyword\">first</span> <span class=\"hljs-keyword\">window</span>\n      ├─ Slide: remove <span class=\"hljs-keyword\">left</span>, <span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">right</span>\n      └─ Track <span class=\"hljs-keyword\">result</span>\n\n  └─ <span class=\"hljs-keyword\">NO</span> → Variable<span class=\"hljs-operator\">-</span>size sliding <span class=\"hljs-keyword\">window</span>\n      <span class=\"hljs-keyword\">Are</span> you looking <span class=\"hljs-keyword\">for</span> longest<span class=\"hljs-operator\">/</span>maximum?\n        └─ YES → Expand <span class=\"hljs-keyword\">right</span>, shrink <span class=\"hljs-keyword\">left</span> <span class=\"hljs-keyword\">when</span> invalid\n            ├─ <span class=\"hljs-keyword\">Update</span> <span class=\"hljs-keyword\">result</span> <span class=\"hljs-keyword\">when</span> VALID\n\n      <span class=\"hljs-keyword\">Are</span> you looking <span class=\"hljs-keyword\">for</span> shortest<span class=\"hljs-operator\">/</span>minimum?\n        └─ YES → Expand <span class=\"hljs-keyword\">right</span>, shrink <span class=\"hljs-keyword\">left</span> while valid\n            ├─ <span class=\"hljs-keyword\">Update</span> <span class=\"hljs-keyword\">result</span> while SHRINKING\n\n      <span class=\"hljs-keyword\">Are</span> you counting subarrays?\n        └─ YES → <span class=\"hljs-keyword\">For</span> <span class=\"hljs-keyword\">each</span> <span class=\"hljs-keyword\">right</span>, <span class=\"hljs-keyword\">add</span> (<span class=\"hljs-keyword\">right</span> <span class=\"hljs-operator\">-</span> <span class=\"hljs-keyword\">left</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)\n            ├─ Consider \"at most K\" trick\n</code></pre>\n<h3>Keywords to Look For</h3>\n<p><strong>Strong Indicators:</strong></p>\n<ul>\n  <li>\"substring\" (always contiguous)</li>\n  <li>\"subarray\" (contiguous, unlike subsequence)</li>\n  <li>\"consecutive elements\"</li>\n  <li>\"window of size K\"</li>\n  <li>\"at most K\" / \"at least K\"</li>\n  <li>\"longest/shortest contiguous\"</li>\n</ul>\n<p><strong>Weak/Misleading:</strong></p>\n<ul>\n  <li>\"subsequence\" (NOT contiguous → not sliding window)</li>\n  <li>\"any elements\" (not necessarily contiguous)</li>\n  <li>\"find all pairs\" (might be two pointers, not sliding window)</li>\n</ul>\n<hr>\n<h2>Common Mistakes</h2>\n<h3>Mistake 1: Using Sliding Window for Non-Contiguous Problems</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># WRONG: Finding two elements that sum to target</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">twoSum</span>(<span class=\"hljs-params\">nums, target</span>):\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># ❌ This is two pointers, not sliding window</span>\n    <span class=\"hljs-comment\"># Elements don't need to be contiguous!</span>\n</code></pre>\n<h3>Mistake 2: Not Handling Window Initialization</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># WRONG: Off-by-one errors</span>\n<span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(arr)):\n    <span class=\"hljs-comment\"># Add arr[right]</span>\n    <span class=\"hljs-keyword\">if</span> right > k:  <span class=\"hljs-comment\"># ❌ Should be right >= k</span>\n        <span class=\"hljs-comment\"># Remove arr[right - k]</span>\n</code></pre>\n<h3>Mistake 3: Updating Result at Wrong Time</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># For LONGEST problems:</span>\n<span class=\"hljs-keyword\">while</span> invalid:\n    shrink()\nresult = <span class=\"hljs-built_in\">max</span>(result, size)  <span class=\"hljs-comment\"># ✓ Update when VALID</span>\n\n<span class=\"hljs-comment\"># For SHORTEST problems:</span>\n<span class=\"hljs-keyword\">while</span> valid:\n    result = <span class=\"hljs-built_in\">min</span>(result, size)  <span class=\"hljs-comment\"># ✓ Update while SHRINKING</span>\n    shrink()\n</code></pre>\n<h3>Mistake 4: Not Cleaning Up Data Structures</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># WRONG: Memory leak</span>\nchar_count[s[left]] -= <span class=\"hljs-number\">1</span>\nleft += <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># RIGHT: Remove when count becomes 0</span>\nchar_count[s[left]] -= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">if</span> char_count[s[left]] == <span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">del</span> char_count[s[left]]\nleft += <span class=\"hljs-number\">1</span>\n</code></pre>\n<h3>Mistake 5: Confusing Window Size Calculation</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Window from left to right (inclusive)</span>\nwindow_size = right - left + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># ✓ Correct</span>\n\nwindow_size = right - left  <span class=\"hljs-comment\"># ❌ Off by one</span>\n</code></pre>\n<hr>\n<h2>Practice Problems</h2>\n<h3>Easy</h3>\n<ol>\n  <li><strong>Maximum Average Subarray I</strong> - Fixed window, find max average of k elements</li>\n  <li><strong>Minimum Size Subarray Sum</strong> - Variable window, shortest subarray with sum ≥ target</li>\n  <li><strong>Contains Duplicate II</strong> - Check if duplicate exists within k distance</li>\n</ol>\n<h3>Medium</h3>\n<ol start=\"4\">\n  <li><strong>Longest Substring Without Repeating Characters</strong> - Variable window, no repeating chars</li>\n  <li><strong>Longest Repeating Character Replacement</strong> - Variable window, at most k replacements</li>\n  <li><strong>Permutation in String</strong> - Fixed window, check if s2 contains permutation of s1</li>\n  <li><strong>Find All Anagrams in a String</strong> - Fixed window, find all anagram start indices</li>\n  <li><strong>Max Consecutive Ones III</strong> - Variable window, flip at most k zeros</li>\n  <li><strong>Fruit Into Baskets</strong> - Variable window, at most 2 types</li>\n  <li><strong>Longest Substring with At Most K Distinct Characters</strong> - Variable window</li>\n</ol>\n<h3>Hard</h3>\n<ol start=\"11\">\n  <li><strong>Minimum Window Substring</strong> - Variable window, shortest window containing all chars of t</li>\n  <li><strong>Sliding Window Maximum</strong> - Fixed window with deque, find max in each window</li>\n  <li><strong>Subarrays with K Different Integers</strong> - Count subarrays with exactly k distinct</li>\n  <li><strong>Longest Substring with At Most Two Distinct Characters</strong> - Similar to #10 but k=2</li>\n</ol>\n<hr>\n<h2>Summary</h2>\n<h3>Key Takeaways</h3>\n<ol>\n  <li><strong>Sliding window = optimization for contiguous sequences</strong></li>\n  <li><strong>Two types: Fixed-size (simpler) vs Variable-size (more powerful)</strong></li>\n  <li><strong>Variable window uses two pointers: right expands, left shrinks</strong></li>\n  <li><strong>Track window state with hash map/set/counters</strong></li>\n  <li><strong>Update result at the right time (valid for longest, shrinking for shortest)</strong></li>\n</ol>\n<h3>Time/Space Complexity</h3>\n<ul>\n  <li><strong>Time:</strong> O(n) - each element visited at most twice (once by right, once by left)</li>\n  <li><strong>Space:</strong> O(k) - where k is window size or unique elements</li>\n</ul>\n<h3>When to Use</h3>\n<p>✅ Contiguous subarrays/substrings<br>✅ Longest/shortest/count with condition<br>✅ Keywords: substring, subarray, consecutive, window<br>✅ Can determine validity from current window alone</p>\n<p>❌ Subsequences (can skip elements)<br>❌ Elements from anywhere<br>❌ Requires global state beyond window<br>❌ Needs sorting first</p>\n<h3>The Universal Template</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sliding_window</span>(<span class=\"hljs-params\">arr</span>):\n    left = <span class=\"hljs-number\">0</span>\n    window_state = {}  <span class=\"hljs-comment\"># hash map, set, counter, sum</span>\n    result = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># or float('inf') for minimum</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(arr)):\n        <span class=\"hljs-comment\"># 1. Expand: add arr[right]</span>\n        update_window(arr[right])\n\n        <span class=\"hljs-comment\"># 2. Shrink: while invalid</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> is_valid():\n            remove_from_window(arr[left])\n            left += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># 3. Update result</span>\n        result = update(result, right - left + <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n"}},"__N_SSG":true}