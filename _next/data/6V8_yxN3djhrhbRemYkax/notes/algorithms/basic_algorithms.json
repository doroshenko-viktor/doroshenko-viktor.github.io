{"pageProps":{"noteKey":["algorithms","basic_algorithms"],"note":{"title":"Basic algorithms","date":"2025-10-04","content":"\n<h1>Complete LeetCode Patterns Guide</h1>\n<p>A comprehensive guide to all major algorithm patterns for technical interview preparation.</p>\n<hr>\n<h2>1. Two Pointers</h2>\n<h3>When to Use</h3>\n<ul>\n  <li>Sorted arrays</li>\n  <li>Finding pairs/triplets</li>\n  <li>Removing duplicates in-place</li>\n  <li>Palindrome checking</li>\n  <li>Linked list cycle detection</li>\n  <li>Finding middle element</li>\n</ul>\n<h3>Sub-Patterns</h3>\n<h4>A) Opposite Direction</h4>\n<p>Start from both ends, move toward center.</p>\n<p><strong>Example: Two Sum II (Sorted Array)</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">twoSum</span>(<span class=\"hljs-params\">nums, target</span>):\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> left &#x3C; right:\n        current_sum = nums[left] + nums[right]\n\n        <span class=\"hljs-keyword\">if</span> current_sum == target:\n            <span class=\"hljs-keyword\">return</span> [left, right]\n        <span class=\"hljs-keyword\">elif</span> current_sum &#x3C; target:\n            left += <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># need larger sum</span>\n        <span class=\"hljs-keyword\">else</span>:\n            right -= <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># need smaller sum</span>\n\n    <span class=\"hljs-keyword\">return</span> []\n</code></pre>\n<p><strong>Example: Valid Palindrome</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isPalindrome</span>(<span class=\"hljs-params\">s</span>):\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(s) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> left &#x3C; right:\n        <span class=\"hljs-keyword\">while</span> left &#x3C; right <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> s[left].isalnum():\n            left += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">while</span> left &#x3C; right <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> s[right].isalnum():\n            right -= <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">if</span> s[left].lower() != s[right].lower():\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n        left += <span class=\"hljs-number\">1</span>\n        right -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n</code></pre>\n<p><strong>Example: Container With Most Water</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxArea</span>(<span class=\"hljs-params\">height</span>):\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(height) - <span class=\"hljs-number\">1</span>\n    max_water = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">while</span> left &#x3C; right:\n        width = right - left\n        current_height = <span class=\"hljs-built_in\">min</span>(height[left], height[right])\n        max_water = <span class=\"hljs-built_in\">max</span>(max_water, width * current_height)\n\n        <span class=\"hljs-comment\"># Move pointer with smaller height</span>\n        <span class=\"hljs-keyword\">if</span> height[left] &#x3C; height[right]:\n            left += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            right -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> max_water\n</code></pre>\n<h4>B) Fast and Slow (Floyd's Algorithm)</h4>\n<p>Both pointers move in same direction at different speeds.</p>\n<p><strong>Example: Linked List Cycle Detection</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hasCycle</span>(<span class=\"hljs-params\">head</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> head:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    slow = fast = head\n\n    <span class=\"hljs-keyword\">while</span> fast <span class=\"hljs-keyword\">and</span> fast.<span class=\"hljs-built_in\">next</span>:\n        slow = slow.<span class=\"hljs-built_in\">next</span>\n        fast = fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n\n        <span class=\"hljs-keyword\">if</span> slow == fast:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n</code></pre>\n<p><strong>Example: Find Middle of Linked List</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">middleNode</span>(<span class=\"hljs-params\">head</span>):\n    slow = fast = head\n\n    <span class=\"hljs-keyword\">while</span> fast <span class=\"hljs-keyword\">and</span> fast.<span class=\"hljs-built_in\">next</span>:\n        slow = slow.<span class=\"hljs-built_in\">next</span>\n        fast = fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-keyword\">return</span> slow\n</code></pre>\n<h4>C) Same Direction with Gap</h4>\n<p>Maintain fixed distance between pointers.</p>\n<p><strong>Example: Remove Nth Node From End</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">removeNthFromEnd</span>(<span class=\"hljs-params\">head, n</span>):\n    dummy = ListNode(<span class=\"hljs-number\">0</span>)\n    dummy.<span class=\"hljs-built_in\">next</span> = head\n    fast = slow = dummy\n\n    <span class=\"hljs-comment\"># Move fast n+1 steps ahead</span>\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>):\n        fast = fast.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-comment\"># Move both until fast reaches end</span>\n    <span class=\"hljs-keyword\">while</span> fast:\n        fast = fast.<span class=\"hljs-built_in\">next</span>\n        slow = slow.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-comment\"># Remove node</span>\n    slow.<span class=\"hljs-built_in\">next</span> = slow.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-keyword\">return</span> dummy.<span class=\"hljs-built_in\">next</span>\n</code></pre>\n<h4>D) Same Direction (Write Pointer)</h4>\n<p>One pointer scans, another writes.</p>\n<p><strong>Example: Remove Duplicates from Sorted Array</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">removeDuplicates</span>(<span class=\"hljs-params\">nums</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> nums:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    write_pos = <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(nums)):\n        <span class=\"hljs-keyword\">if</span> nums[i] != nums[i-<span class=\"hljs-number\">1</span>]:\n            nums[write_pos] = nums[i]\n            write_pos += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> write_pos\n</code></pre>\n<p><strong>Example: Move Zeroes</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">moveZeroes</span>(<span class=\"hljs-params\">nums</span>):\n    write_pos = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># Move all non-zeros to front</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(nums)):\n        <span class=\"hljs-keyword\">if</span> nums[i] != <span class=\"hljs-number\">0</span>:\n            nums[write_pos] = nums[i]\n            write_pos += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># Fill rest with zeros</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(write_pos, <span class=\"hljs-built_in\">len</span>(nums)):\n        nums[i] = <span class=\"hljs-number\">0</span>\n</code></pre>\n<h3>Key Insights</h3>\n<ul>\n  <li><strong>Opposite direction</strong>: Works on sorted data, makes directional decisions</li>\n  <li><strong>Fast/slow</strong>: Detects cycles, finds middle elements</li>\n  <li><strong>Gap</strong>: Useful for \"Nth from end\" problems</li>\n  <li><strong>Write pointer</strong>: In-place array modifications</li>\n</ul>\n<hr>\n<h2>2. Hash Tables and Sets</h2>\n<h3>When to Use</h3>\n<ul>\n  <li>\"Does X exist?\"</li>\n  <li>\"Have I seen this before?\"</li>\n  <li>Counting frequencies</li>\n  <li>Finding duplicates</li>\n  <li>Complement searches</li>\n  <li>Grouping/categorizing data</li>\n</ul>\n<h3>Mental Model</h3>\n<p>Trade space for speed - remember past elements for O(1) lookups.</p>\n<p><strong>Example: Two Sum (Unsorted)</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">twoSum</span>(<span class=\"hljs-params\">nums, target</span>):\n    seen = {}  <span class=\"hljs-comment\"># value -> index</span>\n\n    <span class=\"hljs-keyword\">for</span> i, num <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums):\n        complement = target - num\n\n        <span class=\"hljs-keyword\">if</span> complement <span class=\"hljs-keyword\">in</span> seen:\n            <span class=\"hljs-keyword\">return</span> [seen[complement], i]\n\n        seen[num] = i\n\n    <span class=\"hljs-keyword\">return</span> []\n</code></pre>\n<p><strong>Example: First Unique Character</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">firstUniqChar</span>(<span class=\"hljs-params\">s</span>):\n    count = {}\n\n    <span class=\"hljs-comment\"># Count frequencies</span>\n    <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> s:\n        count[char] = count.get(char, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># Find first with count 1</span>\n    <span class=\"hljs-keyword\">for</span> i, char <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(s):\n        <span class=\"hljs-keyword\">if</span> count[char] == <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> i\n\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n</code></pre>\n<p><strong>Example: Group Anagrams</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> defaultdict\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">groupAnagrams</span>(<span class=\"hljs-params\">strs</span>):\n    groups = defaultdict(<span class=\"hljs-built_in\">list</span>)\n\n    <span class=\"hljs-keyword\">for</span> s <span class=\"hljs-keyword\">in</span> strs:\n        <span class=\"hljs-comment\"># Sort as key (or use char count tuple)</span>\n        key = <span class=\"hljs-string\">''</span>.join(<span class=\"hljs-built_in\">sorted</span>(s))\n        groups[key].append(s)\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(groups.values())\n</code></pre>\n<p><strong>Example: Longest Consecutive Sequence</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">longestConsecutive</span>(<span class=\"hljs-params\">nums</span>):\n    num_set = <span class=\"hljs-built_in\">set</span>(nums)\n    max_length = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> num <span class=\"hljs-keyword\">in</span> num_set:\n        <span class=\"hljs-comment\"># Only start counting if it's the start of a sequence</span>\n        <span class=\"hljs-keyword\">if</span> num - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> num_set:\n            current = num\n            length = <span class=\"hljs-number\">1</span>\n\n            <span class=\"hljs-keyword\">while</span> current + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">in</span> num_set:\n                current += <span class=\"hljs-number\">1</span>\n                length += <span class=\"hljs-number\">1</span>\n\n            max_length = <span class=\"hljs-built_in\">max</span>(max_length, length)\n\n    <span class=\"hljs-keyword\">return</span> max_length\n</code></pre>\n<h3>Key Insights</h3>\n<ul>\n  <li>Use hash map when you need to <strong>remember and lookup</strong></li>\n  <li>Use hash set for <strong>existence checks</strong></li>\n  <li>Count frequencies for <strong>duplicate/unique problems</strong></li>\n  <li>Time: O(1) average, Space: O(n)</li>\n</ul>\n<hr>\n<h2>3. Stack</h2>\n<h3>When to Use</h3>\n<ul>\n  <li>Parentheses/bracket matching</li>\n  <li>\"Next greater/smaller element\"</li>\n  <li>Evaluating expressions</li>\n  <li>Undo operations</li>\n  <li>Processing in reverse order</li>\n  <li>Nested structures</li>\n</ul>\n<h3>Mental Model</h3>\n<p>LIFO (Last In, First Out) - like a pile of plates.</p>\n<p><strong>Example: Valid Parentheses</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isValid</span>(<span class=\"hljs-params\">s</span>):\n    stack = []\n    pairs = {<span class=\"hljs-string\">'('</span>: <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'['</span>: <span class=\"hljs-string\">']'</span>, <span class=\"hljs-string\">'{'</span>: <span class=\"hljs-string\">'}'</span>}\n\n    <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> s:\n        <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">in</span> pairs:  <span class=\"hljs-comment\"># opening bracket</span>\n            stack.append(char)\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># closing bracket</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> stack <span class=\"hljs-keyword\">or</span> pairs[stack.pop()] != char:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(stack) == <span class=\"hljs-number\">0</span>\n</code></pre>\n<p><strong>Example: Evaluate Reverse Polish Notation</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">evalRPN</span>(<span class=\"hljs-params\">tokens</span>):\n    stack = []\n\n    <span class=\"hljs-keyword\">for</span> token <span class=\"hljs-keyword\">in</span> tokens:\n        <span class=\"hljs-keyword\">if</span> token <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">'+'</span>, <span class=\"hljs-string\">'-'</span>, <span class=\"hljs-string\">'*'</span>, <span class=\"hljs-string\">'/'</span>]:\n            b = stack.pop()\n            a = stack.pop()\n\n            <span class=\"hljs-keyword\">if</span> token == <span class=\"hljs-string\">'+'</span>:\n                stack.append(a + b)\n            <span class=\"hljs-keyword\">elif</span> token == <span class=\"hljs-string\">'-'</span>:\n                stack.append(a - b)\n            <span class=\"hljs-keyword\">elif</span> token == <span class=\"hljs-string\">'*'</span>:\n                stack.append(a * b)\n            <span class=\"hljs-keyword\">else</span>:\n                stack.append(<span class=\"hljs-built_in\">int</span>(a / b))\n        <span class=\"hljs-keyword\">else</span>:\n            stack.append(<span class=\"hljs-built_in\">int</span>(token))\n\n    <span class=\"hljs-keyword\">return</span> stack[<span class=\"hljs-number\">0</span>]\n</code></pre>\n<p><strong>Example: Min Stack</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinStack</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.stack = []\n        self.min_stack = []\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">self, val</span>):\n        self.stack.append(val)\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.min_stack <span class=\"hljs-keyword\">or</span> val &#x3C;= self.min_stack[-<span class=\"hljs-number\">1</span>]:\n            self.min_stack.append(val)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>):\n        val = self.stack.pop()\n        <span class=\"hljs-keyword\">if</span> val == self.min_stack[-<span class=\"hljs-number\">1</span>]:\n            self.min_stack.pop()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.stack[-<span class=\"hljs-number\">1</span>]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getMin</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.min_stack[-<span class=\"hljs-number\">1</span>]\n</code></pre>\n<p><strong>Example: Daily Temperatures</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dailyTemperatures</span>(<span class=\"hljs-params\">temperatures</span>):\n    result = [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-built_in\">len</span>(temperatures)\n    stack = []  <span class=\"hljs-comment\"># indices</span>\n\n    <span class=\"hljs-keyword\">for</span> i, temp <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(temperatures):\n        <span class=\"hljs-keyword\">while</span> stack <span class=\"hljs-keyword\">and</span> temperatures[stack[-<span class=\"hljs-number\">1</span>]] &#x3C; temp:\n            prev_idx = stack.pop()\n            result[prev_idx] = i - prev_idx\n\n        stack.append(i)\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<p><strong>Example: Simplify Path</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simplifyPath</span>(<span class=\"hljs-params\">path</span>):\n    stack = []\n    parts = path.split(<span class=\"hljs-string\">'/'</span>)\n\n    <span class=\"hljs-keyword\">for</span> part <span class=\"hljs-keyword\">in</span> parts:\n        <span class=\"hljs-keyword\">if</span> part == <span class=\"hljs-string\">'..'</span> <span class=\"hljs-keyword\">and</span> stack:\n            stack.pop()\n        <span class=\"hljs-keyword\">elif</span> part <span class=\"hljs-keyword\">and</span> part != <span class=\"hljs-string\">'.'</span> <span class=\"hljs-keyword\">and</span> part != <span class=\"hljs-string\">'..'</span>:\n            stack.append(part)\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'/'</span> + <span class=\"hljs-string\">'/'</span>.join(stack)\n</code></pre>\n<h3>Key Insights</h3>\n<ul>\n  <li>Opening elements → push</li>\n  <li>Closing elements → pop and verify</li>\n  <li>\"Next greater\" problems → monotonic stack pattern</li>\n  <li>Nested structures → natural stack use case</li>\n</ul>\n<hr>\n<h2>4. Tree Traversal (DFS &#x26; BFS)</h2>\n<h3>When to Use</h3>\n<ul>\n  <li>Any tree/hierarchical structure</li>\n  <li>Finding paths</li>\n  <li>Level-order problems</li>\n  <li>Validation problems</li>\n  <li>Calculating depths/heights</li>\n</ul>\n<h3>A) DFS (Depth-First Search)</h3>\n<p>Go deep first, explore one path completely before backtracking.</p>\n<h4>Recursive DFS (Most Common)</h4>\n<p><strong>Example: Maximum Depth</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxDepth</span>(<span class=\"hljs-params\">root</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    left_depth = maxDepth(root.left)\n    right_depth = maxDepth(root.right)\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">max</span>(left_depth, right_depth)\n</code></pre>\n<p><strong>Example: Validate Binary Search Tree</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isValidBST</span>(<span class=\"hljs-params\">root</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">validate</span>(<span class=\"hljs-params\">node, min_val, max_val</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> node:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (min_val &#x3C; node.val &#x3C; max_val):\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n        <span class=\"hljs-keyword\">return</span> (validate(node.left, min_val, node.val) <span class=\"hljs-keyword\">and</span>\n                validate(node.right, node.val, max_val))\n\n    <span class=\"hljs-keyword\">return</span> validate(root, <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">'-inf'</span>), <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">'inf'</span>))\n</code></pre>\n<p><strong>Example: Path Sum</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hasPathSum</span>(<span class=\"hljs-params\">root, targetSum</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-comment\"># Leaf node</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root.left <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> root.right:\n        <span class=\"hljs-keyword\">return</span> root.val == targetSum\n\n    remaining = targetSum - root.val\n    <span class=\"hljs-keyword\">return</span> (hasPathSum(root.left, remaining) <span class=\"hljs-keyword\">or</span>\n            hasPathSum(root.right, remaining))\n</code></pre>\n<p><strong>Example: Lowest Common Ancestor</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lowestCommonAncestor</span>(<span class=\"hljs-params\">root, p, q</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root <span class=\"hljs-keyword\">or</span> root == p <span class=\"hljs-keyword\">or</span> root == q:\n        <span class=\"hljs-keyword\">return</span> root\n\n    left = lowestCommonAncestor(root.left, p, q)\n    right = lowestCommonAncestor(root.right, p, q)\n\n    <span class=\"hljs-keyword\">if</span> left <span class=\"hljs-keyword\">and</span> right:\n        <span class=\"hljs-keyword\">return</span> root\n\n    <span class=\"hljs-keyword\">return</span> left <span class=\"hljs-keyword\">if</span> left <span class=\"hljs-keyword\">else</span> right\n</code></pre>\n<p><strong>Example: Diameter of Binary Tree</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">diameterOfBinaryTree</span>(<span class=\"hljs-params\">root</span>):\n    max_diameter = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">height</span>(<span class=\"hljs-params\">node</span>):\n        <span class=\"hljs-keyword\">nonlocal</span> max_diameter\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> node:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n        left_height = height(node.left)\n        right_height = height(node.right)\n\n        <span class=\"hljs-comment\"># Update diameter</span>\n        max_diameter = <span class=\"hljs-built_in\">max</span>(max_diameter, left_height + right_height)\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">max</span>(left_height, right_height)\n\n    height(root)\n    <span class=\"hljs-keyword\">return</span> max_diameter\n</code></pre>\n<h4>Iterative DFS (Using Stack)</h4>\n<p><strong>Example: Inorder Traversal</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inorderTraversal</span>(<span class=\"hljs-params\">root</span>):\n    result = []\n    stack = []\n    current = root\n\n    <span class=\"hljs-keyword\">while</span> current <span class=\"hljs-keyword\">or</span> stack:\n        <span class=\"hljs-comment\"># Go to leftmost node</span>\n        <span class=\"hljs-keyword\">while</span> current:\n            stack.append(current)\n            current = current.left\n\n        <span class=\"hljs-comment\"># Process node</span>\n        current = stack.pop()\n        result.append(current.val)\n\n        <span class=\"hljs-comment\"># Go right</span>\n        current = current.right\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<h3>B) BFS (Breadth-First Search)</h3>\n<p>Process level by level using a queue.</p>\n<p><strong>Example: Level Order Traversal</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> deque\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">levelOrder</span>(<span class=\"hljs-params\">root</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\n        <span class=\"hljs-keyword\">return</span> []\n\n    result = []\n    queue = deque([root])\n\n    <span class=\"hljs-keyword\">while</span> queue:\n        level_size = <span class=\"hljs-built_in\">len</span>(queue)\n        level = []\n\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(level_size):\n            node = queue.popleft()\n            level.append(node.val)\n\n            <span class=\"hljs-keyword\">if</span> node.left:\n                queue.append(node.left)\n            <span class=\"hljs-keyword\">if</span> node.right:\n                queue.append(node.right)\n\n        result.append(level)\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<p><strong>Example: Right Side View</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rightSideView</span>(<span class=\"hljs-params\">root</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\n        <span class=\"hljs-keyword\">return</span> []\n\n    result = []\n    queue = deque([root])\n\n    <span class=\"hljs-keyword\">while</span> queue:\n        level_size = <span class=\"hljs-built_in\">len</span>(queue)\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(level_size):\n            node = queue.popleft()\n\n            <span class=\"hljs-comment\"># Last node in level</span>\n            <span class=\"hljs-keyword\">if</span> i == level_size - <span class=\"hljs-number\">1</span>:\n                result.append(node.val)\n\n            <span class=\"hljs-keyword\">if</span> node.left:\n                queue.append(node.left)\n            <span class=\"hljs-keyword\">if</span> node.right:\n                queue.append(node.right)\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<p><strong>Example: Minimum Depth</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minDepth</span>(<span class=\"hljs-params\">root</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    queue = deque([(root, <span class=\"hljs-number\">1</span>)])\n\n    <span class=\"hljs-keyword\">while</span> queue:\n        node, depth = queue.popleft()\n\n        <span class=\"hljs-comment\"># First leaf found = minimum depth</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> node.left <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> node.right:\n            <span class=\"hljs-keyword\">return</span> depth\n\n        <span class=\"hljs-keyword\">if</span> node.left:\n            queue.append((node.left, depth + <span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-keyword\">if</span> node.right:\n            queue.append((node.right, depth + <span class=\"hljs-number\">1</span>))\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n<h3>Key Insights</h3>\n<ul>\n  <li><strong>DFS</strong>: Use for paths, validation, heights (recursive is cleaner)</li>\n  <li><strong>BFS</strong>: Use for shortest paths, level-order, minimum depth</li>\n  <li><strong>DFS Time/Space</strong>: O(n) time, O(h) space where h = height</li>\n  <li><strong>BFS Time/Space</strong>: O(n) time, O(w) space where w = max width</li>\n</ul>\n<hr>\n<h2>5. Linked List Manipulation</h2>\n<h3>When to Use</h3>\n<ul>\n  <li>Reversing lists</li>\n  <li>Reordering nodes</li>\n  <li>Merging lists</li>\n  <li>Detecting cycles</li>\n  <li>Finding intersections</li>\n</ul>\n<h3>Mental Model</h3>\n<p>Keep track of multiple pointers to avoid losing references.</p>\n<p><strong>Example: Reverse Linked List</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reverseList</span>(<span class=\"hljs-params\">head</span>):\n    prev = <span class=\"hljs-literal\">None</span>\n    curr = head\n\n    <span class=\"hljs-keyword\">while</span> curr:\n        next_temp = curr.<span class=\"hljs-built_in\">next</span>  <span class=\"hljs-comment\"># save next</span>\n        curr.<span class=\"hljs-built_in\">next</span> = prev       <span class=\"hljs-comment\"># reverse link</span>\n        prev = curr            <span class=\"hljs-comment\"># move prev forward</span>\n        curr = next_temp       <span class=\"hljs-comment\"># move curr forward</span>\n\n    <span class=\"hljs-keyword\">return</span> prev\n</code></pre>\n<p><strong>Example: Merge Two Sorted Lists</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">mergeTwoLists</span>(<span class=\"hljs-params\">l1, l2</span>):\n    dummy = ListNode(<span class=\"hljs-number\">0</span>)\n    current = dummy\n\n    <span class=\"hljs-keyword\">while</span> l1 <span class=\"hljs-keyword\">and</span> l2:\n        <span class=\"hljs-keyword\">if</span> l1.val &#x3C; l2.val:\n            current.<span class=\"hljs-built_in\">next</span> = l1\n            l1 = l1.<span class=\"hljs-built_in\">next</span>\n        <span class=\"hljs-keyword\">else</span>:\n            current.<span class=\"hljs-built_in\">next</span> = l2\n            l2 = l2.<span class=\"hljs-built_in\">next</span>\n        current = current.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-comment\"># Attach remaining nodes</span>\n    current.<span class=\"hljs-built_in\">next</span> = l1 <span class=\"hljs-keyword\">if</span> l1 <span class=\"hljs-keyword\">else</span> l2\n\n    <span class=\"hljs-keyword\">return</span> dummy.<span class=\"hljs-built_in\">next</span>\n</code></pre>\n<p><strong>Example: Reorder List</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reorderList</span>(<span class=\"hljs-params\">head</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> head <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> head.<span class=\"hljs-built_in\">next</span>:\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-comment\"># Find middle</span>\n    slow = fast = head\n    <span class=\"hljs-keyword\">while</span> fast.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">and</span> fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>:\n        slow = slow.<span class=\"hljs-built_in\">next</span>\n        fast = fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-comment\"># Reverse second half</span>\n    second = slow.<span class=\"hljs-built_in\">next</span>\n    slow.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\n\n    prev = <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">while</span> second:\n        next_temp = second.<span class=\"hljs-built_in\">next</span>\n        second.<span class=\"hljs-built_in\">next</span> = prev\n        prev = second\n        second = next_temp\n\n    <span class=\"hljs-comment\"># Merge alternating</span>\n    first, second = head, prev\n    <span class=\"hljs-keyword\">while</span> second:\n        temp1, temp2 = first.<span class=\"hljs-built_in\">next</span>, second.<span class=\"hljs-built_in\">next</span>\n        first.<span class=\"hljs-built_in\">next</span> = second\n        second.<span class=\"hljs-built_in\">next</span> = temp1\n        first, second = temp1, temp2\n</code></pre>\n<p><strong>Example: Palindrome Linked List</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isPalindrome</span>(<span class=\"hljs-params\">head</span>):\n    <span class=\"hljs-comment\"># Find middle</span>\n    slow = fast = head\n    <span class=\"hljs-keyword\">while</span> fast.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">and</span> fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>:\n        slow = slow.<span class=\"hljs-built_in\">next</span>\n        fast = fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-comment\"># Reverse second half</span>\n    second = slow.<span class=\"hljs-built_in\">next</span>\n    slow.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\n\n    prev = <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">while</span> second:\n        next_temp = second.<span class=\"hljs-built_in\">next</span>\n        second.<span class=\"hljs-built_in\">next</span> = prev\n        prev = second\n        second = next_temp\n\n    <span class=\"hljs-comment\"># Compare</span>\n    first, second = head, prev\n    <span class=\"hljs-keyword\">while</span> second:\n        <span class=\"hljs-keyword\">if</span> first.val != second.val:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n        first = first.<span class=\"hljs-built_in\">next</span>\n        second = second.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n</code></pre>\n<p><strong>Example: Add Two Numbers</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">addTwoNumbers</span>(<span class=\"hljs-params\">l1, l2</span>):\n    dummy = ListNode(<span class=\"hljs-number\">0</span>)\n    current = dummy\n    carry = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">while</span> l1 <span class=\"hljs-keyword\">or</span> l2 <span class=\"hljs-keyword\">or</span> carry:\n        val1 = l1.val <span class=\"hljs-keyword\">if</span> l1 <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n        val2 = l2.val <span class=\"hljs-keyword\">if</span> l2 <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n\n        total = val1 + val2 + carry\n        carry = total // <span class=\"hljs-number\">10</span>\n        current.<span class=\"hljs-built_in\">next</span> = ListNode(total % <span class=\"hljs-number\">10</span>)\n\n        current = current.<span class=\"hljs-built_in\">next</span>\n        l1 = l1.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">if</span> l1 <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">None</span>\n        l2 = l2.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">if</span> l2 <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">return</span> dummy.<span class=\"hljs-built_in\">next</span>\n</code></pre>\n<h3>Key Insights</h3>\n<ul>\n  <li>Use <strong>dummy node</strong> to simplify edge cases</li>\n  <li>Save <code>next</code> before breaking links</li>\n  <li>Three pointers for reversal: <code>prev</code>, <code>curr</code>, <code>next</code></li>\n  <li>Combine with fast/slow for complex operations</li>\n</ul>\n<hr>\n<h2>6. Sliding Window</h2>\n<h3>When to Use</h3>\n<ul>\n  <li>Longest/shortest substring/subarray</li>\n  <li>Fixed-size window problems</li>\n  <li>\"All subarrays of size K\"</li>\n  <li>Contiguous sequences with constraints</li>\n</ul>\n<h3>Mental Model</h3>\n<p>Maintain a window that expands (right pointer) and contracts (left pointer) to satisfy conditions.</p>\n<h3>A) Fixed Size Window</h3>\n<p><strong>Example: Maximum Sum Subarray of Size K</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxSumSubarray</span>(<span class=\"hljs-params\">nums, k</span>):\n    window_sum = <span class=\"hljs-built_in\">sum</span>(nums[:k])\n    max_sum = window_sum\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(k, <span class=\"hljs-built_in\">len</span>(nums)):\n        <span class=\"hljs-comment\"># Slide window: remove left, add right</span>\n        window_sum = window_sum - nums[i-k] + nums[i]\n        max_sum = <span class=\"hljs-built_in\">max</span>(max_sum, window_sum)\n\n    <span class=\"hljs-keyword\">return</span> max_sum\n</code></pre>\n<h3>B) Variable Size Window</h3>\n<p><strong>Example: Longest Substring Without Repeating Characters</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lengthOfLongestSubstring</span>(<span class=\"hljs-params\">s</span>):\n    seen = <span class=\"hljs-built_in\">set</span>()\n    left = <span class=\"hljs-number\">0</span>\n    max_length = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s)):\n        <span class=\"hljs-comment\"># Shrink window while duplicate exists</span>\n        <span class=\"hljs-keyword\">while</span> s[right] <span class=\"hljs-keyword\">in</span> seen:\n            seen.remove(s[left])\n            left += <span class=\"hljs-number\">1</span>\n\n        seen.add(s[right])\n        max_length = <span class=\"hljs-built_in\">max</span>(max_length, right - left + <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> max_length\n</code></pre>\n<p><strong>Example: Minimum Window Substring</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minWindow</span>(<span class=\"hljs-params\">s, t</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> s <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> t:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>\n\n    need = Counter(t)\n    have = {}\n\n    left = <span class=\"hljs-number\">0</span>\n    min_len = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">'inf'</span>)\n    min_start = <span class=\"hljs-number\">0</span>\n    matched = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s)):\n        char = s[right]\n        have[char] = have.get(char, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">in</span> need <span class=\"hljs-keyword\">and</span> have[char] == need[char]:\n            matched += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Try to shrink window</span>\n        <span class=\"hljs-keyword\">while</span> matched == <span class=\"hljs-built_in\">len</span>(need):\n            <span class=\"hljs-keyword\">if</span> right - left + <span class=\"hljs-number\">1</span> &#x3C; min_len:\n                min_len = right - left + <span class=\"hljs-number\">1</span>\n                min_start = left\n\n            left_char = s[left]\n            have[left_char] -= <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> left_char <span class=\"hljs-keyword\">in</span> need <span class=\"hljs-keyword\">and</span> have[left_char] &#x3C; need[left_char]:\n                matched -= <span class=\"hljs-number\">1</span>\n\n            left += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-keyword\">if</span> min_len == <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">'inf'</span>) <span class=\"hljs-keyword\">else</span> s[min_start:min_start + min_len]\n</code></pre>\n<p><strong>Example: Longest Repeating Character Replacement</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">characterReplacement</span>(<span class=\"hljs-params\">s, k</span>):\n    count = {}\n    left = <span class=\"hljs-number\">0</span>\n    max_length = <span class=\"hljs-number\">0</span>\n    max_count = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> right <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s)):\n        count[s[right]] = count.get(s[right], <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>\n        max_count = <span class=\"hljs-built_in\">max</span>(max_count, count[s[right]])\n\n        <span class=\"hljs-comment\"># Window size - most frequent char > k replacements allowed</span>\n        <span class=\"hljs-keyword\">while</span> (right - left + <span class=\"hljs-number\">1</span>) - max_count > k:\n            count[s[left]] -= <span class=\"hljs-number\">1</span>\n            left += <span class=\"hljs-number\">1</span>\n\n        max_length = <span class=\"hljs-built_in\">max</span>(max_length, right - left + <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> max_length\n</code></pre>\n<p><strong>Example: Permutation in String</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">checkInclusion</span>(<span class=\"hljs-params\">s1, s2</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s1) > <span class=\"hljs-built_in\">len</span>(s2):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    s1_count = Counter(s1)\n    window_count = Counter(s2[:<span class=\"hljs-built_in\">len</span>(s1)])\n\n    <span class=\"hljs-keyword\">if</span> s1_count == window_count:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s1), <span class=\"hljs-built_in\">len</span>(s2)):\n        <span class=\"hljs-comment\"># Add new char</span>\n        window_count[s2[i]] += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Remove old char</span>\n        left_char = s2[i - <span class=\"hljs-built_in\">len</span>(s1)]\n        window_count[left_char] -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> window_count[left_char] == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">del</span> window_count[left_char]\n\n        <span class=\"hljs-keyword\">if</span> s1_count == window_count:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n</code></pre>\n<h3>Key Insights</h3>\n<ul>\n  <li><strong>Fixed window</strong>: Simple sliding, calculate on each slide</li>\n  <li><strong>Variable window</strong>: Expand with right, contract with left</li>\n  <li>Use hash map/set to track window contents</li>\n  <li>Time: O(n), Space: O(k) where k = unique elements</li>\n</ul>\n<hr>\n<h2>7. Binary Search</h2>\n<h3>When to Use</h3>\n<ul>\n  <li>Sorted arrays</li>\n  <li>\"Find target/boundary/peak\"</li>\n  <li>Minimizing/maximizing with constraint</li>\n  <li>\"Can we achieve X?\" problems</li>\n</ul>\n<h3>Mental Model</h3>\n<p>Eliminate half of search space each iteration.</p>\n<h3>A) Classic Binary Search</h3>\n<p><strong>Example: Find Target</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">nums, target</span>):\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> left &#x3C;= right:\n        mid = left + (right - left) // <span class=\"hljs-number\">2</span>\n\n        <span class=\"hljs-keyword\">if</span> nums[mid] == target:\n            <span class=\"hljs-keyword\">return</span> mid\n        <span class=\"hljs-keyword\">elif</span> nums[mid] &#x3C; target:\n            left = mid + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            right = mid - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n</code></pre>\n<h3>B) Finding Boundaries</h3>\n<p><strong>Example: First and Last Position</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">searchRange</span>(<span class=\"hljs-params\">nums, target</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">findBoundary</span>(<span class=\"hljs-params\">is_first</span>):\n        left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>\n        result = -<span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">while</span> left &#x3C;= right:\n            mid = left + (right - left) // <span class=\"hljs-number\">2</span>\n\n            <span class=\"hljs-keyword\">if</span> nums[mid] == target:\n                result = mid\n                <span class=\"hljs-keyword\">if</span> is_first:\n                    right = mid - <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># search left half</span>\n                <span class=\"hljs-keyword\">else</span>:\n                    left = mid + <span class=\"hljs-number\">1</span>   <span class=\"hljs-comment\"># search right half</span>\n            <span class=\"hljs-keyword\">elif</span> nums[mid] &#x3C; target:\n                left = mid + <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                right = mid - <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">return</span> result\n\n    <span class=\"hljs-keyword\">return</span> [findBoundary(<span class=\"hljs-literal\">True</span>), findBoundary(<span class=\"hljs-literal\">False</span>)]\n</code></pre>\n<h3>C) Search in Rotated Array</h3>\n<p><strong>Example: Search in Rotated Sorted Array</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">nums, target</span>):\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> left &#x3C;= right:\n        mid = left + (right - left) // <span class=\"hljs-number\">2</span>\n\n        <span class=\"hljs-keyword\">if</span> nums[mid] == target:\n            <span class=\"hljs-keyword\">return</span> mid\n\n        <span class=\"hljs-comment\"># Left half is sorted</span>\n        <span class=\"hljs-keyword\">if</span> nums[left] &#x3C;= nums[mid]:\n            <span class=\"hljs-keyword\">if</span> nums[left] &#x3C;= target &#x3C; nums[mid]:\n                right = mid - <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                left = mid + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-comment\"># Right half is sorted</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">if</span> nums[mid] &#x3C; target &#x3C;= nums[right]:\n                left = mid + <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                right = mid - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n</code></pre>\n<h3>D) Find Peak Element</h3>\n<p><strong>Example: Find Peak</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">findPeakElement</span>(<span class=\"hljs-params\">nums</span>):\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> left &#x3C; right:\n        mid = left + (right - left) // <span class=\"hljs-number\">2</span>\n\n        <span class=\"hljs-keyword\">if</span> nums[mid] > nums[mid + <span class=\"hljs-number\">1</span>]:\n            <span class=\"hljs-comment\"># Peak is on left (or mid itself)</span>\n            right = mid\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-comment\"># Peak is on right</span>\n            left = mid + <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> left\n</code></pre>\n<h3>E) Minimize/Maximize Problems</h3>\n<p><strong>Example: Minimum in Rotated Sorted Array</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">findMin</span>(<span class=\"hljs-params\">nums</span>):\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> left &#x3C; right:\n        mid = left + (right - left) // <span class=\"hljs-number\">2</span>\n\n        <span class=\"hljs-keyword\">if</span> nums[mid] > nums[right]:\n            <span class=\"hljs-comment\"># Minimum is in right half</span>\n            left = mid + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-comment\"># Minimum is in left half (or mid itself)</span>\n            right = mid\n\n    <span class=\"hljs-keyword\">return</span> nums[left]\n</code></pre>\n<p><strong>Example: Koko Eating Bananas</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> math\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minEatingSpeed</span>(<span class=\"hljs-params\">piles, h</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">canFinish</span>(<span class=\"hljs-params\">speed</span>):\n        hours = <span class=\"hljs-built_in\">sum</span>(math.ceil(pile / speed) <span class=\"hljs-keyword\">for</span> pile <span class=\"hljs-keyword\">in</span> piles)\n        <span class=\"hljs-keyword\">return</span> hours &#x3C;= h\n\n    left, right = <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">max</span>(piles)\n\n    <span class=\"hljs-keyword\">while</span> left &#x3C; right:\n        mid = left + (right - left) // <span class=\"hljs-number\">2</span>\n\n        <span class=\"hljs-keyword\">if</span> canFinish(mid):\n            right = mid  <span class=\"hljs-comment\"># try slower speed</span>\n        <span class=\"hljs-keyword\">else</span>:\n            left = mid + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># need faster speed</span>\n\n    <span class=\"hljs-keyword\">return</span> left\n</code></pre>\n<h3>Key Insights</h3>\n<ul>\n  <li>Use <code>left + (right - left) // 2</code> to avoid overflow</li>\n  <li><strong>left &#x3C;= right</strong> for finding exact value</li>\n  <li><strong>left &#x3C; right</strong> for finding boundary</li>\n  <li>\"Can we achieve X?\" → Binary search on answer space</li>\n  <li>Time: O(log n)</li>\n</ul>\n<hr>\n<h2>8. Prefix Sum</h2>\n<h3>When to Use</h3>\n<ul>\n  <li>Subarray sum problems</li>\n  <li>Range sum queries</li>\n  <li>\"Count subarrays with sum = K\"</li>\n  <li>Problems with negative numbers</li>\n</ul>\n<h3>Mental Model</h3>\n<p>Precompute cumulative sums to answer range queries in O(1).</p>\n<p><strong>Example: Subarray Sum Equals K</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">subarraySum</span>(<span class=\"hljs-params\">nums, k</span>):\n    count = <span class=\"hljs-number\">0</span>\n    prefix_sum = <span class=\"hljs-number\">0</span>\n    sum_count = {<span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">1</span>}  <span class=\"hljs-comment\"># prefix_sum -> count</span>\n\n    <span class=\"hljs-keyword\">for</span> num <span class=\"hljs-keyword\">in</span> nums:\n        prefix_sum += num\n\n        <span class=\"hljs-comment\"># Check if there's a previous prefix that gives us k</span>\n        <span class=\"hljs-keyword\">if</span> prefix_sum - k <span class=\"hljs-keyword\">in</span> sum_count:\n            count += sum_count[prefix_sum - k]\n\n        sum_count[prefix_sum] = sum_count.get(prefix_sum, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> count\n</code></pre>\n<p><strong>Example: Contiguous Array (Equal 0s and 1s)</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">findMaxLength</span>(<span class=\"hljs-params\">nums</span>):\n    <span class=\"hljs-comment\"># Treat 0 as -1, find subarray with sum 0</span>\n    max_length = <span class=\"hljs-number\">0</span>\n    sum_index = {<span class=\"hljs-number\">0</span>: -<span class=\"hljs-number\">1</span>}  <span class=\"hljs-comment\"># sum -> first index</span>\n    running_sum = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> i, num <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums):\n        running_sum += <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> num == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> -<span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">if</span> running_sum <span class=\"hljs-keyword\">in</span> sum_index:\n            max_length = <span class=\"hljs-built_in\">max</span>(max_length, i - sum_index[running_sum])\n        <span class=\"hljs-keyword\">else</span>:\n            sum_index[running_sum] = i\n\n    <span class=\"hljs-keyword\">return</span> max_length\n</code></pre>\n<p><strong>Example: Range Sum Query (Immutable)</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NumArray</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, nums</span>):\n        self.prefix = [<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> num <span class=\"hljs-keyword\">in</span> nums:\n            self.prefix.append(self.prefix[-<span class=\"hljs-number\">1</span>] + num)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sumRange</span>(<span class=\"hljs-params\">self, left, right</span>):\n        <span class=\"hljs-keyword\">return</span> self.prefix[right + <span class=\"hljs-number\">1</span>] - self.prefix[left]\n</code></pre>\n<p><strong>Example: Product of Array Except Self</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">productExceptSelf</span>(<span class=\"hljs-params\">nums</span>):\n    n = <span class=\"hljs-built_in\">len</span>(nums)\n    result = [<span class=\"hljs-number\">1</span>] * n\n\n    <span class=\"hljs-comment\"># Left products</span>\n    left_product = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n        result[i] = left_product\n        left_product *= nums[i]\n\n    <span class=\"hljs-comment\"># Right products</span>\n    right_product = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\n        result[i] *= right_product\n        right_product *= nums[i]\n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<h3>Key Insights</h3>\n<ul>\n  <li><strong>Prefix sum</strong>: <code>sum(i, j) = prefix[j+1] - prefix[i]</code></li>\n  <li>Use hash map to store prefix sums for subarray problems</li>\n  <li>Works with negative numbers (unlike sliding window)</li>\n  <li>Time: O(n), Space: O(n)</li>\n</ul>\n<hr>\n<h2>9. Graph Traversal</h2>\n<h3>When to Use</h3>\n<ul>\n  <li>Connected components</li>\n  <li>Cycle detection</li>\n  <li>Shortest paths</li>\n  <li>Topological sorting</li>\n  <li>Dependencies (course schedule)</li>\n</ul>\n<h3>A) DFS on Graph</h3>\n<p><strong>Example: Number of Islands</strong></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">numIslands</span>(<span class=\"hljs-params\">grid</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> grid:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">r, c</span>):\n        <span class=\"hljs-keyword\">if</span> (r &#x3C; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> r >= <span class=\"hljs-built_in\">len</span>(grid) <span class=\"hljs-keyword\">or</span> c &#x3C; <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">## The Recognition Framework</span>\n\nMost easy-mid problems can be solved by asking yourself these questions <span class=\"hljs-keyword\">in</span> order:\n\n<span class=\"hljs-number\">1.</span> Does this involve a <span class=\"hljs-built_in\">sorted</span> array <span class=\"hljs-keyword\">or</span> finding pairs/triplets?\n   → Two Pointers\n<span class=\"hljs-number\">2.</span> Do I need to check <span class=\"hljs-keyword\">if</span> something exists <span class=\"hljs-keyword\">or</span> count frequencies?\n   → Hash Table/<span class=\"hljs-type\">Set</span>\n<span class=\"hljs-number\">3.</span> Does this involve parentheses, operations <span class=\"hljs-keyword\">in</span> reverse order, <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"most recent\"</span> logic?\n   → Stack\n<span class=\"hljs-number\">4.</span> Is this about a tree <span class=\"hljs-keyword\">or</span> graph structure?\n   → DFS (Recursion) <span class=\"hljs-keyword\">or</span> BFS (Queue)\n<span class=\"hljs-number\">5.</span> Does this involve reversing <span class=\"hljs-keyword\">or</span> reordering a linked <span class=\"hljs-built_in\">list</span>?\n   → Three-Pointer Technique\n</code></pre>\n"}},"__N_SSG":true}