{"pageProps":{"noteKey":["csharp","streaming-json-serialization"],"note":{"title":"Efficient Serialization Of Large Object Into JSON In C#","date":"2022-06-14","content":"\n<p>\n  When you need to serialize large objects there may occur problems with memory allocation, heavy\n  large object heap allocation which creates additional load on garbage collection and in some cases\n  to throwing of <code>OutOfMemoryException</code>.\n</p>\n<p>\n  Using <code>Newtonsoft.Json</code> package it is possible to serialize/deserialize large objects without loading\n  whole data into memory.\n</p>\n<p>Let's consider an example. We have an object of simple structure:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-keyword\">record</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">StreamedObject</span>(<span class=\"hljs-params\">Guid Id, <span class=\"hljs-built_in\">string</span> Value</span>)</span>;\n</code></pre>\n<p>\n  And we have a large stream of such an objects with unknown length. It may be <code>gRPC</code>, simple iterator,\n  making calls to external api or generated data. This objects eventually must be serialized\n  into single <code>JSON</code> string and saved into file. To achieve this without a need to load all objects\n  into memory in <code>Newtonsoft.Json</code> there is an overload of <code>Serialize</code> method of <code>JsonSerializer</code>,\n  allowing to write data into stream as it appears:\n</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Serialize</span>(<span class=\"hljs-params\">JsonWriter jsonWriter, <span class=\"hljs-built_in\">object</span>? <span class=\"hljs-keyword\">value</span></span>)</span>;\n</code></pre>\n<p>\n  Let's create a method, which will receive a stream and enumeration of our objects.\n  This method will serialize objects by the way these objects appear directly into given stream:\n</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteJsonToStream</span>(<span class=\"hljs-params\">Stream stream, IEnumerable&#x3C;StreamedObject> objects</span>)</span>\n{\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> utcStreamWriter = <span class=\"hljs-keyword\">new</span> StreamWriter(stream); <span class=\"hljs-comment\">// create a UTF-8 encoded stream</span>\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> jsonWriter = <span class=\"hljs-keyword\">new</span> JsonTextWriter(utcStreamWriter); <span class=\"hljs-comment\">// create JsonWriter of Newtonsoft.Json</span>\n\n    <span class=\"hljs-keyword\">var</span> serializer = <span class=\"hljs-keyword\">new</span> JsonSerializer();\n    serializer.Serialize(jsonWriter, objects);\n}\n</code></pre>\n<p>In preference it is handy to convert it into an extension method of <code>Stream</code>:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StreamExtensions</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteJsonToStream</span>&#x3C;<span class=\"hljs-title\">T</span>>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span> Stream stream, IEnumerable&#x3C;T> objects</span>)</span>\n    {\n        <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> utcStreamWriter = <span class=\"hljs-keyword\">new</span> StreamWriter(stream);\n        <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> jsonWriter = <span class=\"hljs-keyword\">new</span> JsonTextWriter(utcStreamWriter);\n\n        <span class=\"hljs-keyword\">var</span> serializer = <span class=\"hljs-keyword\">new</span> JsonSerializer();\n        serializer.Serialize(jsonWriter, objects);\n    }\n}\n</code></pre>\n<p>Now we can use this extension on some particular example:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">var</span> fixture = <span class=\"hljs-keyword\">new</span> Fixture();\n<span class=\"hljs-keyword\">var</span> objects = fixture.CreateMany&#x3C;StreamedObject>(<span class=\"hljs-number\">200</span>); <span class=\"hljs-comment\">// create an enumeration of objects with length 200</span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> file = File.Create(<span class=\"hljs-string\">\"test.json\"</span>); <span class=\"hljs-comment\">// create a file in local file system and get a stream,</span>\n<span class=\"hljs-comment\">// allowing to write into this file</span>\n\nfile.WriteJsonToStream(objects); <span class=\"hljs-comment\">// serializing generated objects into file stream</span>\n</code></pre>\n<p>\n  As we created an extension over simple stream, we are not limited with only <code>FileStream</code>.\n  We can use it with any stream we may need:\n</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-comment\">//..</span>\n<span class=\"hljs-keyword\">var</span> memoryStream = <span class=\"hljs-keyword\">new</span> MemoryStream();\nmemoryStream.WriteJsonToStream(objects);\n</code></pre>\n<h2>References</h2>\n<ul>\n  <li><a href=\"https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonTextWriter.htm\">https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonTextWriter.htm</a></li>\n  <li><a href=\"https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonWriter.htm\">https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonWriter.htm</a></li>\n  <li><a href=\"https://www.newtonsoft.com/json/help/html/Performance.htm\">https://www.newtonsoft.com/json/help/html/Performance.htm</a></li>\n</ul>\n"}},"__N_SSG":true}