{"pageProps":{"noteKey":["rust","axum","using-axum"],"note":{"title":"Using Rust Axum With Sqlx","date":"2022-03-03","content":"\n<h2>State</h2>\n<h3>FromRef</h3>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> axum::{\n    extract::{State, FromRef},\n    routing::get,\n    Router,\n};\n\n<span class=\"hljs-comment\">// Our top level state that contains an `HttpClient` and a `Database`</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// `#[derive(FromRef)]` makes them sub states so they can be extracted</span>\n<span class=\"hljs-comment\">// independently</span>\n<span class=\"hljs-meta\">#[derive(Clone, FromRef)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">AppState</span> {\n    client: HttpClient,\n    database: Database,\n}\n\n<span class=\"hljs-meta\">#[derive(Clone)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">HttpClient</span> {}\n\n<span class=\"hljs-meta\">#[derive(Clone)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Database</span> {}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">state</span> = AppState {\n    client: HttpClient {},\n    database: Database {},\n};\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">app</span> = Router::<span class=\"hljs-title function_ invoke__\">new</span>()\n    .<span class=\"hljs-title function_ invoke__\">route</span>(<span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-title function_ invoke__\">get</span>(handler))\n    .<span class=\"hljs-title function_ invoke__\">with_state</span>(state);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">handler</span>(\n    <span class=\"hljs-comment\">// We can extract both `State&#x3C;HttpClient>` and `State&#x3C;Database>`</span>\n    <span class=\"hljs-title function_ invoke__\">State</span>(client): State&#x3C;HttpClient>,\n    <span class=\"hljs-title function_ invoke__\">State</span>(database): State&#x3C;Database>,\n) {}\n</code></pre>\n<h2>Migrations</h2>\n<p>Install <code>sqlx cli</code>:</p>\n<pre><code class=\"hljs language-bash\">cargo install sqlx-cli\n</code></pre>\n<p>\n  This command accepts some additional arguments, which define features related to different database engines, ssl e.t.c.\n  To check what you may need use <a href=\"https://lib.rs/crates/sqlx-cli\">this doc</a>\n</p>\n<p>\n  To connect to the database cli requires to specify connection string. This may be done with <code>--database-url</code> argument\n  and also using <code>.env</code> file with <code>DATABASE_URL</code> value. For example:\n</p>\n<pre><code class=\"hljs language-txt\">DATABASE_URL=postgres://postgres@localhost/my_database\n</code></pre>\n<p>To initialize database run: <code>sqlx database create</code>, to remove created database <code>sqlx database drop</code></p>\n<p>\n  Create migration file: <code>sqlx migrate add &#x3C;name></code>. By default this creates not reversible migration. I you need this migration\n  to be reversible add <code>-r</code> argument to the previous command. <em>Note: all migrations should be of the same type.</em>\n  Fill created files with <code>sql</code> code.\n  To apply created migration run: <code>sqlx migrate run</code>. To revert migration run <code>sqlx migrate revert</code>\n</p>\n<h2>Offline mode for <code>query!()</code></h2>\n<p>// todo:</p>\n"}},"__N_SSG":true}