{"pageProps":{"noteKey":["csharp","csharp-testing-with-autofixture"],"note":{"title":"AutoFixture In C#","date":"2022-04-10","content":"\n<h2>Data Customization</h2>\n<p>We have a simple model for test:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">record</span> <span class=\"hljs-title\">TripDto</span>(<span class=\"hljs-params\">Guid Id, IEnumerable&#x3C;CityDto> City, <span class=\"hljs-built_in\">string</span> Price, <span class=\"hljs-built_in\">int</span> Days</span>)</span> { }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">record</span> <span class=\"hljs-title\">CityDto</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> Name, <span class=\"hljs-built_in\">int</span> Size</span>)</span>;\n</code></pre>\n<p>Now let's introduce some constraints.</p>\n<p>\n  We want to have trips with amount of cities between <code>1</code> and <code>5</code>, prices between <code>\"5000.5\"</code> and <code>\"9000.5\"</code>,\n  duration between <code>3</code> and <code>6</code> days.\n</p>\n<p><code>City.Name</code> must consist of only three capital letters</p>\n<p>And say, we would have a <code>Price</code> as a string to be able to mitigate precision problems on serialization.</p>\n<p>\n  To create customized objects with <code>Autofixture</code> we need to create an class, which implements\n  <code>ISpecimenBuilder</code> interface. This class will be executed every time auto-fixture will\n  need to create new instance of <code>Entity</code>.\n</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EntityCustomization</span> : <span class=\"hljs-title\">ISpecimenBuilder</span>\n{\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">readonly</span> Random Rand;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-title\">AbstractCustomization</span>(<span class=\"hljs-params\">Random rand</span>)</span>\n    {\n        Rand = rand;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">object</span> <span class=\"hljs-title\">Create</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> request, ISpecimenContext context</span>)</span>\n    {\n        <span class=\"hljs-keyword\">if</span> (request <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> Type type || type != <span class=\"hljs-keyword\">typeof</span>(Entity))\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> NoSpecimen(); <span class=\"hljs-comment\">// if a request, sent to our customization is not of type</span>\n            <span class=\"hljs-comment\">// we need to create, return signal, that we don't need to customize on it</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Entity(); <span class=\"hljs-comment\">// if current request is of type Entity, we can return customized instance of it</span>\n    }\n}\n</code></pre>\n<p>\n  Partially this request type check will be on each custom <code>SpecimenBuilder</code>. To make some\n  generalization, let's create a base abstract class, which will accumulate some common behavior\n  and add additional randomization logic:\n</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AbstractCustomization</span>&#x3C;<span class=\"hljs-title\">T</span>> : <span class=\"hljs-title\">ISpecimenBuilder</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">notnull</span>\n{\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">readonly</span> Random Rand;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-title\">AbstractCustomization</span>(<span class=\"hljs-params\">Random rand</span>)</span>\n    {\n        Rand = rand;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">object</span> <span class=\"hljs-title\">Create</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> request, ISpecimenContext context</span>)</span>\n    {\n        <span class=\"hljs-keyword\">if</span> (request <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> Type type || type != <span class=\"hljs-keyword\">typeof</span>(T))\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> NoSpecimen();\n\n        <span class=\"hljs-keyword\">return</span> Create(context);\n    }\n\n    <span class=\"hljs-comment\">// this method will be executed only in case, when request is required type</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> T <span class=\"hljs-title\">Create</span>(<span class=\"hljs-params\">ISpecimenContext context</span>)</span>;\n\n    <span class=\"hljs-comment\">// returns string with numeric content</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">GetRandomNumberString</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-built_in\">double</span> to</span>)</span> => Convert.ToString(\n        Rand.NextInt64((<span class=\"hljs-built_in\">long</span>)<span class=\"hljs-keyword\">from</span>, (<span class=\"hljs-built_in\">long</span>)(to - <span class=\"hljs-number\">1</span>)) + Rand.NextDouble());\n\n    <span class=\"hljs-comment\">// get ASCII char by it's index</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-built_in\">char</span> <span class=\"hljs-title\">GetRandomASCIIChar</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> fromIndex, <span class=\"hljs-built_in\">int</span> toIndex</span>)</span> => (<span class=\"hljs-built_in\">char</span>)Rand.Next(fromIndex, toIndex);\n\n    <span class=\"hljs-comment\">// get random int in given range</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetInt</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-built_in\">int</span> to</span>)</span> => Rand.Next(<span class=\"hljs-keyword\">from</span>, to);\n\n    <span class=\"hljs-comment\">// get string of given length from characters between specified indexes</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">GenerateString</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> asciiIndexFrom, <span class=\"hljs-built_in\">int</span> asciiIndexTo, <span class=\"hljs-built_in\">int</span> length</span>)</span> => Enumerable\n        .Repeat(() => GetRandomASCIIChar(asciiIndexFrom, asciiIndexTo), length)\n        .Aggregate(<span class=\"hljs-keyword\">new</span> StringBuilder(), (acc, getChar) =>\n        {\n            acc.Append(getChar());\n            <span class=\"hljs-keyword\">return</span> acc;\n        })\n        .ToString();\n}\n</code></pre>\n<p>Now create a concrete implementations for two our DTOs:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TripCustomizations</span> : <span class=\"hljs-title\">AbstractCustomization</span>&#x3C;<span class=\"hljs-title\">TripDto</span>>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">TripCustomizations</span>(<span class=\"hljs-params\">Random rand</span>) : <span class=\"hljs-title\">base</span>(<span class=\"hljs-params\">rand</span>)</span> { }\n\n    <span class=\"hljs-comment\">// generate TripDto object which satisfies required boundaries:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> TripDto <span class=\"hljs-title\">Create</span>(<span class=\"hljs-params\">ISpecimenContext context</span>)</span> => <span class=\"hljs-keyword\">new</span>(\n        Id: Guid.NewGuid(),\n        <span class=\"hljs-comment\">// create collection of cities with length between 1 and 5</span>\n        Cities: context.CreateMany&#x3C;CityDto>(GetInt(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)),\n        <span class=\"hljs-comment\">// using methods, defined in abstract class to generate some randomized values</span>\n        Price: GetRandomNumberString(<span class=\"hljs-number\">5000.5</span>, <span class=\"hljs-number\">9000.5</span>),\n        Days: GetInt(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n    );\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CityCustomization</span> : <span class=\"hljs-title\">AbstractCustomization</span>&#x3C;<span class=\"hljs-title\">CityDto</span>>\n{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> HashSet&#x3C;<span class=\"hljs-built_in\">string</span>> _usedCityNames = <span class=\"hljs-keyword\">new</span>();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CityCustomization</span>(<span class=\"hljs-params\">Random rand</span>) : <span class=\"hljs-title\">base</span>(<span class=\"hljs-params\">rand</span>)</span>\n    {\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> CityDto <span class=\"hljs-title\">Create</span>(<span class=\"hljs-params\">ISpecimenContext context</span>)</span> => <span class=\"hljs-keyword\">new</span>(\n        <span class=\"hljs-comment\">// on city name we have a constraint - it has to be unique and consist of 3 capital latin letters.</span>\n        Name: GetUnique3CapitalCharCityName(),\n        Size: GetInt(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)\n    );\n\n    <span class=\"hljs-comment\">// to create every time only unique names, we will use hash set, stored as object's private member</span>\n    <span class=\"hljs-comment\">// every time we will need to get new name we will check if it exists in this cash and generate new</span>\n    <span class=\"hljs-comment\">// until we won't have a unique one. having unique name we will add it to cash and then return.</span>\n    <span class=\"hljs-comment\">// there may be more efficient implementation, e.g. using tries, but it is enough for now =)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">GetUnique3CapitalCharCityName</span>()</span>\n    {\n        <span class=\"hljs-keyword\">var</span> cityName = GenerateName();\n        <span class=\"hljs-keyword\">while</span> (_usedCityNames.Contains(cityName))\n        {\n            cityName = GenerateName();\n        }\n        _usedCityNames.Add(cityName);\n\n        <span class=\"hljs-keyword\">return</span> cityName;\n\n        <span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">GenerateName</span>()</span> => GenerateString(<span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">3</span>);\n    }\n}\n</code></pre>\n<p>Now there is only one step remaining - register customizations:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">var</span> rand = <span class=\"hljs-keyword\">new</span> Random();\n<span class=\"hljs-keyword\">var</span> fixture = <span class=\"hljs-keyword\">new</span> Fixture();\nfixture.Customizations.Add(<span class=\"hljs-keyword\">new</span> ElementDepartureCustomization(rand));\nfixture.Customizations.Add(<span class=\"hljs-keyword\">new</span> ElementPriceCustomization(request.DeparturesAmount, rand));\n\n<span class=\"hljs-keyword\">var</span> tirps = fixture.CreateMany&#x3C;TripDto>(<span class=\"hljs-number\">5</span>);\n</code></pre>\n<h2>References</h2>\n<ul>\n  <li><a href=\"https://timdeschryver.dev/blog/why-i-stopped-worrying-about-test-setups-by-using-autofixture#composite-customizations\">Why I stopped worrying about test setups by using AutoFixture</a></li>\n  <li><a href=\"https://adamstorr.azurewebsites.net/blog/autofixture-generate-specific-format-with-specimen-builders\">https://adamstorr.azurewebsites.net/blog/autofixture-generate-specific-format-with-specimen-builders</a></li>\n  <li><a href=\"http://www.longest.io/2015/03/07/intro-to-specimen-builders-in-autofixture.html\">http://www.longest.io/2015/03/07/intro-to-specimen-builders-in-autofixture.html</a></li>\n</ul>\n"}},"__N_SSG":true}