{"pageProps":{"noteKey":["editors","vim","neovim"],"note":{"title":"Neovim","date":"2022-02-17T22:12:03.284Z","content":"\n<h2>Neovim</h2>\n<h3>Installation</h3>\n<p>To install <code>neovim</code> from source first install the dependencies:</p>\n<pre><code class=\"hljs language-bash\">sudo apt install ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip\n</code></pre>\n<p>Clone the <code>Neovim</code> repository:</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/neovim/neovim.git\n</code></pre>\n<p>Go to the <code>Neovim</code> directory:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> neovim\n</code></pre>\n<p>Build and install <code>Neovim</code>:</p>\n<pre><code class=\"hljs language-bash\">make CMAKE_BUILD_TYPE=RelWithDebInfo\nsudo make install\n</code></pre>\n<p>\n  This will build and install <code>Neovim</code> with debugging symbols. If you don't want debugging symbols, use make\n  <code>CMAKE_BUILD_TYPE=Release</code> instead.\n</p>\n<p>Verify the installation by checking the version number:</p>\n<pre><code class=\"hljs language-bash\">nvim --version\n</code></pre>\n<p>This should output the version number of <code>Neovim</code> that was installed.</p>\n<p><code>Neovim</code> config location: <code>~/.local/share/nvim</code></p>\n<h2>Setting Up NeoVim With Python</h2>\n<p>Vim plugins are able to execute Python code when Vim is compiled with Python support.</p>\n<p>The main advantages of using Python in plugins is that it enables plugins to have access to network sockets, and perform long-running or expensive operations in the background without freezing the Vim UI. This is the reason it is commonly used with completion plugins.</p>\n<p>Install neovim python package:</p>\n<pre><code class=\"hljs language-bash\">pip install neovim\n</code></pre>\n<p>After that <code>:checkhealth</code> command in <code>NeoVim</code> should show that python is correctly set up.</p>\n<h2>Package Manager</h2>\n<p><a href=\"https://github.com/wbthomason/packer.nvim\">Packer</a></p>\n<p>Follow quick start instruction.</p>\n<p>Make a simple configuration in <code>$XDG_CONFIG_HOME/nvim/lua/&#x3C;yourconfig>/packer.lua</code></p>\n<pre><code class=\"hljs language-lua\">vim.cmd <span class=\"hljs-string\">[[packadd packer.nvim]]</span>\n\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'packer'</span>).startup(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(use)</span></span>\n    <span class=\"hljs-comment\">-- Packer can manage itself</span>\n    use <span class=\"hljs-string\">'wbthomason/packer.nvim'</span>\n    use <span class=\"hljs-string\">'folke/tokyonight.nvim'</span>\n<span class=\"hljs-keyword\">end</span>)\n</code></pre>\n<p>To install packages run <code>:PackerSync</code></p>\n<h2>Language Servers</h2>\n<p>To list all capabilities of specified language server:</p>\n<pre><code class=\"hljs language-lua\">:lua <span class=\"hljs-built_in\">print</span>(vim.inspect(vim.lsp.buf_get_clients()[<span class=\"hljs-number\">1</span>].resolved_capabilities))\n</code></pre>\n<h2>Logs</h2>\n<p>To check where <code>LSP</code> logs are located:</p>\n<pre><code class=\"hljs language-css\">:lua <span class=\"hljs-built_in\">print</span>(vim.lsp.<span class=\"hljs-built_in\">get_log_path</span>())\n</code></pre>\n<h2>References</h2>\n<p>\n  <a href=\"https://github.com/deoplete-plugins/deoplete-jedi/wiki/Setting-up-Python-for-Neovim\">Setting up Python for Neovim</a>\n  <a href=\"https://stackoverflow.com/questions/40900829/how-to-get-a-build-of-neovim-with-python3-support-for-windows\">How to get a build of Neovim with python3 support for windows?</a>\n</p>\n"}},"__N_SSG":true}