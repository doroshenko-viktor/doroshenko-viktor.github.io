{"pageProps":{"noteKey":["javascript","js-iterables"],"note":{"title":"JS - Iterables And Collections","date":"2022-03-12","content":"\n<h2>Iterables</h2>\n<p>\n  In <code>JS</code> iterables are objects, which implement <code>iterable</code> protocol and have <code>@@iterator</code> method.\n  Those are arrays, linked lists, maps, sets, strings and so on.\n</p>\n<p>\n  There are also <code>array-like objects</code> - objects, that have a length and possibility to acces it's\n  elements by index.\n</p>\n<h2>Array</h2>\n<p>To create an array in <code>JS</code> there are many possible ways:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> a1 = [<span class=\"hljs-string\">'elem'</span>];\n<span class=\"hljs-keyword\">const</span> a2 = <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">'elem'</span>);\n<span class=\"hljs-keyword\">const</span> a3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">'elem'</span>);\n<span class=\"hljs-keyword\">const</span> a4 = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-string\">'elem'</span>);\n<span class=\"hljs-keyword\">const</span> a5 = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">'elem'</span>);\n</code></pre>\n<p><em>Note: <code>new Array(5)</code> or <code>Array(5)</code> will create new empty array with given length of 5</em></p>\n<p>\n  <code>Array.from(iterable)</code> - this method is meant to convert an array-like object or iterable to an\n  actual array.\n</p>\n<p>e.g.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> arr = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-string\">'string'</span>);\n<span class=\"hljs-comment\">// will contain ['s', 't','r', 'i', 'n', 'g'];</span>\n</code></pre>\n<h3>Looping Over Array</h3>\n<p>To loop over an iterable object we can use <code>for .. of ..</code> loop:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> data <span class=\"hljs-keyword\">of</span> iterable) {}\n</code></pre>\n<h3>Array Methods</h3>\n<p><strong>push:</strong></p>\n<p>To add an element to the end of the collection use <code>push</code> method:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elems = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\nelems.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>);\n<span class=\"hljs-comment\">// will contain [1,2,3,4]</span>\n</code></pre>\n<p><strong>unshift:</strong></p>\n<p>To add an element to the beginning of the collection use <code>unshift</code> method:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elems = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\nelems.<span class=\"hljs-title function_\">unshift</span>(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(elems);\n<span class=\"hljs-comment\">// will contain [0,1,2,3]</span>\n</code></pre>\n<p><strong>pop:</strong></p>\n<p><code>pop</code> method removes last element of a collection and returns it:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lastElem = elems.<span class=\"hljs-title function_\">pop</span>();\n</code></pre>\n<p><strong>shift:</strong></p>\n<p>Method <code>shift</code> removes one element from the beginning of a collection:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> firstElem = elems.<span class=\"hljs-title function_\">shift</span>();\n</code></pre>\n<p><strong>splice:</strong></p>\n<p>\n  Method <code>splice</code> allows to remove arbitrary number of elements in the given array and replace them\n  with any number of new elements. It is an array method an can't be called on other iterables.\n</p>\n<p><code>arr.splice(&#x3C;start position>, &#x3C;amount of removed elements>, ...&#x3C;collection of elements to insert>)</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elems = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\nelems.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, ...[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]);\n<span class=\"hljs-comment\">// result elems => [1, 5, 6]</span>\n</code></pre>\n<p>It is also possible to remove elements counting from the tail. To do this use less than 0 index:</p>\n<pre><code class=\"hljs language-js\">elems.<span class=\"hljs-title function_\">splice</span>(-<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>);\n<span class=\"hljs-comment\">// result elems => [1, 7, 6]</span>\n</code></pre>\n<p><strong>slice:</strong></p>\n<p><code>slice</code> method allows to create a copy of some part of the array:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elems1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">const</span> elemsCopy = elems1.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);\n<span class=\"hljs-comment\">// elemsCopy: [3, 4]</span>\n</code></pre>\n<p>It is also possible to use negative indexes to count from the tail of the collection.</p>\n<p>Not specifying range will copy the entire array:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elems1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">const</span> fullCopy = elems1.<span class=\"hljs-title function_\">slice</span>();\n</code></pre>\n<p><strong>concat:</strong></p>\n<p>\n  <code>concat</code> method accepts another collection and return as a result new array, where current and\n  given array are concatenated together. It does not change original array.\n</p>\n<p><strong>indexOf:</strong></p>\n<p>\n  <code>indexOf</code> allows to find index of specified element in the collection. Second argument allows to\n  define starting position to search. If specified, any previous hits will not be counted.\n  If nothing found result will be <code>-1</code>.\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elemsToSearch = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>];\n<span class=\"hljs-keyword\">const</span> i = elemsToSearch.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"hljs-comment\">// `i` will be 5</span>\n</code></pre>\n<p><strong>includes:</strong></p>\n<p>Allows to check wheather given element exists in collection:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elems = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-keyword\">const</span> exists3 = elems.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p><em>Important to notice, that it will work with value types, because equality of reference types\nwords differently</em></p>\n<p><strong>lastIndexOf:</strong></p>\n<p>\n  <code>lastIndexOf</code> has the same functionality as <code>indexOf</code>. The only difference - it searches starting\n  from the end of the collection towards it's beginning.\n</p>\n<p><strong>find:</strong></p>\n<p><code>find</code> allows to search for required element in the specified array by given predicate:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> complElemsToSearch = [{ <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">3</span> }];\n<span class=\"hljs-keyword\">const</span> foundElem = complElemsToSearch\n  .<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val, ind, arr</span>) =></span> val.<span class=\"hljs-property\">key</span> === <span class=\"hljs-number\">2</span>);\n</code></pre>\n<p>\n  Where <code>val</code> is a reference to the current iteration value, <code>ind</code> - index of current iteration and\n  <code>arr</code> is a reference to the whole array.\n</p>\n<p>\n  It returns reference to the found object, but no it's index.\n  To search for index use <code>findIndex</code> method with the same signature.\n</p>\n<p><strong>forEach:</strong></p>\n<p>\n  This method allows to iterate over every item in the array and perform some action, specified with\n  provided function.\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elements = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\nelements.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val, ind, arr</span>) =></span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`current value is <span class=\"hljs-subst\">${val}</span>`</span>);\n})\n</code></pre>\n<p><strong>map:</strong></p>\n<p>\n  If there is a need to perform some action on every element of a collection and store results in a\n  new collection, it can't acheived with <code>map</code> method:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elements = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">const</span> resultElements = elements\n  .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val, ind, arr</span>) =></span> val * <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-comment\">// resultElements: [2, 4, 6, 8, 10]</span>\n</code></pre>\n<p><strong>filter:</strong></p>\n<p>To filter some collection with given predicate and return result as a new array, use <code>filter</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elemsToFilter = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\n<span class=\"hljs-keyword\">const</span> filtered = elemsToFilter\n  .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val, ind, arr</span>) =></span> val % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-comment\">// filtered: [2, 4, 6, 8]</span>\n</code></pre>\n<p><strong>reduce:</strong></p>\n<p>\n  When you need to calculate some single value from whole collection values(reduce) it is a usecase\n  for <code>reduce</code> method. For example, when we need to calculate sum of all array numbers:\n</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\n<span class=\"hljs-keyword\">const</span> sum = numbers\n  .<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, curr, ind, arra</span>) =></span> prev + curr, <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-comment\">// sum: 45</span>\n</code></pre>\n<p>\n  It accepts a reducer function, which signature contains accumulation value and current value, as\n  well as usual for some other collection methods index and whole array reference. And also <code>reduce</code>\n  accepts second optional value - initial accumulation value.\n</p>\n<h3>Sorting</h3>\n<p><strong>sort:</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> elemsToSort = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-keyword\">const</span> sorted = elemsToSort.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> {\n  <span class=\"hljs-keyword\">if</span> (a > b) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a &#x3C; b) {\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n});\n<span class=\"hljs-comment\">// sorted: [1, 2, 3, 4, 5, 6, 10]</span>\n</code></pre>\n<h2>Set</h2>\n<p>\n  <code>Set</code> is a data structure, which contains unordered and arbitrary number of unique elements. It is\n  iterable, but also contains some unique methods. It does not guarantee order of stored elements and\n  does not allow access to elements by index.\n</p>\n<p>Creting <code>Set</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> s1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(s1);\n</code></pre>\n<p>Iterating over <code>Set</code>;</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> elem <span class=\"hljs-keyword\">of</span> s1.<span class=\"hljs-title function_\">entries</span>()) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(elem);\n}\n</code></pre>\n<p>Cheching existence and deleting of element inside <code>Set</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> (s1.<span class=\"hljs-title function_\">has</span>(<span class=\"hljs-number\">2</span>)) {\n  s1.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-number\">2</span>);\n}\n</code></pre>\n<h2>Map</h2>\n<p>\n  <code>Map</code> is a <code>key-value</code> data structure, where key must be a unique value. It is iterable with some\n  additional methods. It does not allow acces by index. Instead values may be accessed only by it's\n  keys. Unlike <code>object</code> keys may be not only of <code>string</code>, <code>number</code> or <code>symbol</code> type, but any type.\n</p>\n<p>\n  Maps are quite similar to js objects, but unlike them maps allow any data as key and also may be\n  more performant on large amount of data sets. Also maps are better on frequent inserts/removes of\n  data.\n</p>\n<p>Creating of <code>Map</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> m1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([\n  [<span class=\"hljs-string\">\"key1\"</span>, <span class=\"hljs-string\">\"value1\"</span>],\n  [<span class=\"hljs-string\">\"key2\"</span>, <span class=\"hljs-string\">\"value2\"</span>],\n]);\n</code></pre>\n<p>Inserting and retrieving values:</p>\n<pre><code class=\"hljs language-js\">m1.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"key3\"</span>, <span class=\"hljs-string\">\"value3\"</span>);\n<span class=\"hljs-keyword\">const</span> value2 = m1.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"key2\"</span>);\n</code></pre>\n<p>Iterating over <code>Map</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [key, value] <span class=\"hljs-keyword\">of</span> m1.<span class=\"hljs-title function_\">entries</span>()) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(key, value);\n}\n</code></pre>\n<p>\n  <code>entries()</code> returns key/value pairs iterable of two elements arrays.\n  But maps have also <code>keys()</code> methods, which returns iterable of only map's keys and\n  <code>values()</code> method, which returns all values from map.\n</p>\n<p>To get size of map:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> m1length = m1.<span class=\"hljs-property\">size</span>;\n</code></pre>\n"}},"__N_SSG":true}