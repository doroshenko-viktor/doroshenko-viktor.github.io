{"pageProps":{"noteKey":["javascript","Type Script","ts-project-setup"],"note":{"title":"JavaScript/TypeScript Project Setup","date":"2022-03-20","content":"\n<h2>Initializing Project</h2>\n<p>First of all initialize npm project:</p>\n<pre><code class=\"hljs language-bash\">npm init -y\n</code></pre>\n<p>Then install some <code>typescript</code>, types for <code>node.js</code>, linter and prettier:</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev typescript @types/node\n</code></pre>\n<p>Now initialize <code>typescript</code> project:</p>\n<pre><code class=\"hljs language-bash\">npx tsc --init --rootDir src --outDir build --esModuleInterop --resolveJsonModule --lib es6 --module commonjs --allowJs <span class=\"hljs-literal\">false</span> --noImplicitAny <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>Some of important <code>tsconfig.json</code> options:</p>\n<ul>\n  <li><code>rootDir</code>: This is where <code>typescript</code> looks for source code. We've configured it to look in the <code>src/</code> folder.</li>\n  <li><code>outDir</code>: Where TypeScript puts compiled code. In our case it will be placed inside <code>build/</code> folder.</li>\n  <li><code>esModuleInterop</code>: If we're using <code>commonjs</code> as a module system for <code>node.js</code>, then we need this to be set to be <code>true</code>.</li>\n  <li><code>resolveJsonModule</code>: If we use <code>json</code> in this project, this option allows <code>typescript</code> to use it.</li>\n  <li><code>lib</code>: This option adds ambient types to the project, allowing to rely on features from different <code>ecmascript</code> versions, testing libraries or browser <code>DOM</code> api.</li>\n  <li><code>module</code>: <code>commonjs</code> is the standard <code>node.js</code> module system.</li>\n  <li><code>allowJs</code>: this option allows you to include <code>.js</code> files among <code>.ts</code> ones.</li>\n  <li><code>noImplicitAny</code>: In <code>typescript</code> files, don't allow a type to not specify type. Every type needs to have a specific type or explicitly declare <code>any</code> type.</li>\n  <li><code>sourceMap</code>: Create type maps for better debug experience.</li>\n  <li>\n    <code>strict</code>: Strict mode including strict null checking, strict functional types, check, that <code>bind</code>, <code>call</code> and <code>apply</code> match function's signature,\n    check for not initialized constructor properties.\n  </li>\n</ul>\n<p>This should create roughly similar <code>tsconfig.json</code> file:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"compilerOptions\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"target\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"es2016\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"lib\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"es6\"</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"module\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"commonjs\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"rootDir\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"src\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"resolveJsonModule\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"allowJs\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"sourceMap\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"outDir\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"build\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"removeComments\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"esModuleInterop\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"forceConsistentCasingInFileNames\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"strict\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"noImplicitAny\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"noImplicitThis\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"alwaysStrict\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"skipLibCheck\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3>Some Additional <code>tsconfig.json</code> Sections</h3>\n<p><strong>Exclude:</strong></p>\n<p><code>exclude</code> section defines paths, which will be excluded from the compilation:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"exclude\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">\"node_modules\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// exclude node_modules. excluded by default if no `exclude` section specified</span>\n    <span class=\"hljs-string\">\"path-to-file-or-folder-to-exclude\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"**/*.dev.ts\"</span> <span class=\"hljs-comment\">// exclude all files with specified extension in any folder</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p><strong>Include:</strong></p>\n<p><code>include</code> section works the same as <code>exclude</code> but to include specified patterns into compilation.</p>\n<p><strong>Files:</strong></p>\n<p><code>files</code> section specifies concrete files to compile.</p>\n<p><strong>AllowJs &#x26;&#x26; CheckJs:</strong></p>\n<p><code>allowJs</code> and <code>checkJs</code> options enable support for <code>js</code> validation inside of <code>ts</code> projects.</p>\n<p><strong>Specifying Of Compiled Files Source And Destination:</strong></p>\n<p>\n  <code>outDir</code> value used to specify the destination folder of compiled <code>*.ts</code> files.\n  <code>rootDir</code> specifies the root of target files to compile. Only files from inside of this root will be compiled.\n</p>\n<p><strong>Other Options:</strong></p>\n<ul>\n  <li><code>removeComments</code> - not include comments into compiled <code>*.js</code> files.</li>\n  <li><code>noEmit</code> - compile and check source files, but not create compiled <code>*.js</code> files.</li>\n  <li><code>noEmitOnError</code> - not emit compiled <code>js</code> when compilation error occurs.</li>\n</ul>\n<h2>Compilation</h2>\n<p>To compile created project run:</p>\n<pre><code class=\"hljs language-bash\">npx tsc <span class=\"hljs-comment\">#compile project</span>\nnpx tsc -w <span class=\"hljs-comment\">#set compiler to watch mode; (--watch)</span>\n</code></pre>\n<p>Running <code>*.ts</code> file without compilation to js:</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev ts-node nodemon\n\nnpx tsc &#x3C;file-name>.ts\n</code></pre>\n<p><strong>With monitoring:</strong></p>\n<p>Create <code>nodemon.json</code>:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"watch\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"src\"</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"ext\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\".ts,.js\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"ignore\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"exec\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"ts-node ./src/index.ts\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>And also let's add run configuration into <code>package.json</code>:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"start:dev\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"nodemon\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Linting</h2>\n<p>First install <code>eslint</code> package and some of it's supplement packages:</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\n</code></pre>\n<p>Create <code>.eslintrc</code> file:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"root\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"parser\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"@typescript-eslint/parser\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"plugins\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"@typescript-eslint\"</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"extends\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">\"eslint:recommended\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"plugin:@typescript-eslint/eslint-recommended\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"plugin:@typescript-eslint/recommended\"</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>To ignore some files or folders like <code>node_modules</code> during linting create <a href=\"https://eslint.org/docs/user-guide/configuring/ignoring-code\"><code>.eslintignore</code></a>:</p>\n<pre><code class=\"hljs language-text\">node_modules/\nbuild/\n**/*.js\n</code></pre>\n<p>Add lint script to <code>package.json</code> scrypts:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">\"lint\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"eslint . --ext .ts\"</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<p><strong>Additional Linting Configuration:</strong></p>\n<p>There are three modes for a rule in <code>eslint</code>:</p>\n<ul>\n  <li><code>off</code> - 0</li>\n  <li><code>warn</code> - 1</li>\n  <li><code>error</code> - 2</li>\n</ul>\n<p>\n  There is a documentation on <a href=\"https://eslint.org/docs/rules/\">rules reference</a>.\n  For example to restrict usage of <code>console.log</code>:\n</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">\"rules\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"no-console\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// this will lead to displaying an error on console.log</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Formatting</h2>\n<p>To format <code>typescript</code> code we will use <code>prettier</code> library:</p>\n<p>Install it:</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev prettier\n</code></pre>\n<p>Then create <code>prettier</code> configuration file - <code>.prettierrc</code> in the root of the project:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"semi\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"trailingComma\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"none\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"singleQuote\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"printWidth\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">80</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ul>\n  <li><code>semi</code> set to true means that <code>prettier</code> will add semicolons when necessary.</li>\n  <li><code>trailingComma</code> set to none means that <code>prettier</code> will remove any trailing commas at the end of objects.</li>\n  <li><code>singleQuote</code> set to true means that <code>prettier</code> will automatically use single quotes instead of double quotes.</li>\n  <li><code>printWidth</code> set to 80 specifies that the printer will wrap any lines that exceed 80 characters.</li>\n</ul>\n<p>More <code>prettier</code> <a href=\"https://prettier.io/docs/en/options.html\">rules</a></p>\n<p>Add formatting command to <code>package.json</code> scrypts:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">\"format\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"prettier --config .prettierrc 'src/**/*.ts' --write\"</span>\n</code></pre>\n<p><strong>Conflicts with ESLint:</strong></p>\n<p>There probably will be conflicts between <code>prettier</code> formatting and and <code>eslint</code>. To make these two love each other install:</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev eslint-config-prettier eslint-plugin-prettier\n</code></pre>\n<ul>\n  <li><code>eslint-config-prettier</code>: Turns off all <code>eslint</code> rules that have the potential to interfere with <code>prettier</code> rules.</li>\n  <li><code>eslint-plugin-prettier</code>: Turns <code>prettier</code> rules into <code>eslint</code> rules.</li>\n</ul>\n<p>Lastly, we need to make an adjustment to the <code>.eslintrc</code>.</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"root\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"parser\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"@typescript-eslint/parser\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"plugins\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"@typescript-eslint\"</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">\"prettier\"</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"extends\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">\"eslint:recommended\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"plugin:@typescript-eslint/eslint-recommended\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">\"prettier\"</span>\n  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"rules\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>Testing</h2>\n<p>For tests we will use <code>Jest</code> testing framework. To install it:</p>\n<pre><code class=\"hljs language-bash\">npm install --save-dev npm install --save-dev jest @types/jest ts-jest jest @types/jest ts-jest\n</code></pre>\n<p>And create a configuration file for <code>jest</code>:</p>\n<pre><code class=\"hljs language-bash\">npx ts-jest config:init\n</code></pre>\n<p>Modify content so:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@type</span> {<span class=\"hljs-type\">import('ts-jest/dist/types').InitialOptionsTsJest</span>} */</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">preset</span>: <span class=\"hljs-string\">\"ts-jest\"</span>,\n  <span class=\"hljs-attr\">testEnvironment</span>: <span class=\"hljs-string\">\"node\"</span>,\n  <span class=\"hljs-attr\">moduleNameMapper</span>: {\n    <span class=\"hljs-string\">\"@exmpl/(.*)\"</span>: <span class=\"hljs-string\">\"&#x3C;rootDir>/src/$1\"</span>,\n  },\n  <span class=\"hljs-attr\">testRegex</span>: <span class=\"hljs-string\">\"((/__tests__/).*|(\\\\.|/)(test|spec))\\\\.(ts|js)$\"</span>,\n  <span class=\"hljs-attr\">coverageDirectory</span>: <span class=\"hljs-string\">\"coverage\"</span>,\n  <span class=\"hljs-attr\">collectCoverageFrom</span>: [<span class=\"hljs-string\">\"src/**/*.{ts}\"</span>, <span class=\"hljs-string\">\"!src/**/*.d.ts\"</span>],\n}\n</code></pre>\n<p>Here <code>testRegex</code> allows to discover test files.</p>\n<p>Add testing scripts to <code>package.json</code>:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">\"test\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"jest --coverage\"</span><span class=\"hljs-punctuation\">,</span>\n<span class=\"hljs-attr\">\"test:watch\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"jest --coverage --watchAll\"</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<p>\n  To use test discovery in <code>Visual Studio Code</code> <a href=\"https://marketplace.visualstudio.com/items?itemName=kavod-io.vscode-jest-test-adapter\">Jest Test Explorer</a>\n  seems quite a good extension.\n</p>\n"}},"__N_SSG":true}