{"pageProps":{"noteKey":["rust","destructuring"],"note":{"title":"Rust Object Destructuring","date":"2022-03-13","content":"\n<p>Rust allows to easily decompose complex objects into simple.</p>\n<h2>Structs</h2>\n<p>For example, destructuring struct:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\n    x: <span class=\"hljs-type\">i32</span>,\n    y: <span class=\"hljs-type\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">p</span> = Point { x: <span class=\"hljs-number\">0</span>, y: <span class=\"hljs-number\">7</span> };\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">Point</span> { x: a, y: b } = p;\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, a);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, b);\n}\n</code></pre>\n<p>and even more simple case:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\n    x: <span class=\"hljs-type\">i32</span>,\n    y: <span class=\"hljs-type\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">p</span> = Point { x: <span class=\"hljs-number\">0</span>, y: <span class=\"hljs-number\">7</span> };\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">Point</span> { x, y } = p;\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, x);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, y);\n}\n</code></pre>\n<p>Destructuring is effectively a pattern, so it may be used in pattern matching scenarios:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">p</span> = Point { x: <span class=\"hljs-number\">0</span>, y: <span class=\"hljs-number\">7</span> };\n\n    <span class=\"hljs-keyword\">match</span> p {\n        Point { x, y: <span class=\"hljs-number\">0</span> } => <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"On the x axis at {}\"</span>, x),\n        Point { x: <span class=\"hljs-number\">0</span>, y } => <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"On the y axis at {}\"</span>, y),\n        Point { x, y } => <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"On neither axis: ({}, {})\"</span>, x, y),\n    }\n}\n</code></pre>\n<h2>Enums</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Message</span> {\n    Quit,\n    Move { x: <span class=\"hljs-type\">i32</span>, y: <span class=\"hljs-type\">i32</span> },\n    <span class=\"hljs-title function_ invoke__\">Write</span>(<span class=\"hljs-type\">String</span>),\n    <span class=\"hljs-title function_ invoke__\">ChangeColor</span>(<span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">i32</span>),\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">msg</span> = Message::<span class=\"hljs-title function_ invoke__\">ChangeColor</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-number\">255</span>);\n\n    <span class=\"hljs-keyword\">match</span> msg {\n        Message::Quit => {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The Quit variant has no data to destructure.\"</span>)\n        }\n        Message::Move { x, y } => {\n            <span class=\"hljs-built_in\">println!</span>(\n                <span class=\"hljs-string\">\"Move in the x direction {} and in the y direction {}\"</span>,\n                x, y\n            );\n        }\n        Message::<span class=\"hljs-title function_ invoke__\">Write</span>(text) => <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Text message: {}\"</span>, text),\n        Message::<span class=\"hljs-title function_ invoke__\">ChangeColor</span>(r, g, b) => <span class=\"hljs-built_in\">println!</span>(\n            <span class=\"hljs-string\">\"Change the color to red {}, green {}, and blue {}\"</span>,\n            r, g, b\n        ),\n    }\n}\n</code></pre>\n<h2>Destructuring Of Nested Objects</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> {\n    <span class=\"hljs-title function_ invoke__\">Rgb</span>(<span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">i32</span>),\n    <span class=\"hljs-title function_ invoke__\">Hsv</span>(<span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">i32</span>),\n}\n\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Message</span> {\n    Quit,\n    Move { x: <span class=\"hljs-type\">i32</span>, y: <span class=\"hljs-type\">i32</span> },\n    <span class=\"hljs-title function_ invoke__\">Write</span>(<span class=\"hljs-type\">String</span>),\n    <span class=\"hljs-title function_ invoke__\">ChangeColor</span>(Color),\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">msg</span> = Message::<span class=\"hljs-title function_ invoke__\">ChangeColor</span>(Color::<span class=\"hljs-title function_ invoke__\">Hsv</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-number\">255</span>));\n\n    <span class=\"hljs-keyword\">match</span> msg {\n        Message::<span class=\"hljs-title function_ invoke__\">ChangeColor</span>(Color::<span class=\"hljs-title function_ invoke__\">Rgb</span>(r, g, b)) => <span class=\"hljs-built_in\">println!</span>(\n            <span class=\"hljs-string\">\"Change the color to red {}, green {}, and blue {}\"</span>,\n            r, g, b\n        ),\n        Message::<span class=\"hljs-title function_ invoke__\">ChangeColor</span>(Color::<span class=\"hljs-title function_ invoke__\">Hsv</span>(h, s, v)) => <span class=\"hljs-built_in\">println!</span>(\n            <span class=\"hljs-string\">\"Change the color to hue {}, saturation {}, and value {}\"</span>,\n            h, s, v\n        ),\n        _ => (),\n    }\n}\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\n        x: <span class=\"hljs-type\">i32</span>,\n        y: <span class=\"hljs-type\">i32</span>,\n    }\n\n    <span class=\"hljs-keyword\">let</span> ((feet, inches), Point { x, y }) = ((<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">10</span>), Point { x: <span class=\"hljs-number\">3</span>, y: -<span class=\"hljs-number\">10</span> });\n}\n</code></pre>\n<h2>Ignore Some Destructured Values</h2>\n<p>In function signature:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">foo</span>(_: <span class=\"hljs-type\">i32</span>, y: <span class=\"hljs-type\">i32</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"This code only uses the y parameter: {}\"</span>, y);\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-title function_ invoke__\">foo</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n}\n</code></pre>\n<p>In pattern matching:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">numbers</span> = (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>);\n\n<span class=\"hljs-keyword\">match</span> numbers {\n    (first, _, third, _, fifth) => {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Some numbers: {}, {}, {}\"</span>, first, third, fifth)\n    }\n}\n</code></pre>\n<p>Ignore unused variable:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">_x</span> = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">y</span> = <span class=\"hljs-number\">10</span>;\n}\n</code></pre>\n<p>\n  The syntax <code>_x</code> still binds the value to the variable, but disables the warning about unused\n  variable, whereas _ doesnâ€™t bind at all.\n</p>\n<p>\n  It is possible to ignore all remaining parts of structure, which are not explicitly specified to\n  destructure with <code>..</code> operator:\n</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\n    x: <span class=\"hljs-type\">i32</span>,\n    y: <span class=\"hljs-type\">i32</span>,\n    z: <span class=\"hljs-type\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">origin</span> = Point { x: <span class=\"hljs-number\">0</span>, y: <span class=\"hljs-number\">0</span>, z: <span class=\"hljs-number\">0</span> };\n\n<span class=\"hljs-keyword\">match</span> origin {\n    Point { x, .. } => <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x is {}\"</span>, x),\n}\n</code></pre>\n<p>Specificially with tuples, we can ignore positionally:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">numbers</span> = (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>);\n\n    <span class=\"hljs-keyword\">match</span> numbers {\n        (first, .., last) => {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Some numbers: {}, {}\"</span>, first, last);\n        }\n    }\n}\n</code></pre>\n"}},"__N_SSG":true}