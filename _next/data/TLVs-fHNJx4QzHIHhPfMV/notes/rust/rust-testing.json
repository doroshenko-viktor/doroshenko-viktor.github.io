{"pageProps":{"noteKey":["rust","rust-testing"],"note":{"title":"Rust - Testing Code","date":"2022-03-02","content":"\n<h1>Rust Testing</h1>\n<h2>Cargo Test</h2>\n<p>To run single specified test case:</p>\n<pre><code class=\"hljs language-bash\">cargo <span class=\"hljs-built_in\">test</span> &#x3C;test_case_name>\n</code></pre>\n<p>To run only tests from particular test file:</p>\n<pre><code class=\"hljs language-bash\">cargo <span class=\"hljs-built_in\">test</span> --<span class=\"hljs-built_in\">test</span> integration_test\n</code></pre>\n<p>Test with logs printed:</p>\n<pre><code class=\"hljs language-bash\">cargo <span class=\"hljs-built_in\">test</span> -- --nocapture\n</code></pre>\n<h2>Unit Tests</h2>\n<p>In Rust unit tests may be written alongside to the code under test.</p>\n<p>To create test function you need to mark it with <code>#[test]</code> macro:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_1</span>() {\n    <span class=\"hljs-comment\">// ... test code</span>\n}\n</code></pre>\n<p>Also several test cases could be organized into test module with <code>#[cfg(test)]</code>:</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_1</span>() {\n        <span class=\"hljs-comment\">// ... test code</span>\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_2</span>() {\n        <span class=\"hljs-comment\">// ... test code</span>\n    }\n}\n</code></pre>\n<p>\n  <code>#[cfg(test)]</code> macro tells Rust compiler to build this module only when\n  <code>cargo test</code> command is executed.\n</p>\n<p>\n  Using test modules like that also allows to test private function, which are\n  external to it. For example:\n</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">private_function</span>() {\n    <span class=\"hljs-comment\">// some code</span>\n}\n\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::private_function;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_1</span>() {\n        <span class=\"hljs-comment\">// test private_function here</span>\n    }\n}\n</code></pre>\n<h2>Integration Tests</h2>\n<p>\n  In Rust concept of <code>integration testing</code> means such kind of tests, which test behavior\n  of our library from position of external user. Integration tests are checking correctness\n  of the public API and all classes and functions working together.\n</p>\n<p>To create integration tests need to create <code>tests</code> directory in the root of the project:</p>\n<pre><code class=\"hljs language-text\">our_crate\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│   └── lib.rs\n└── tests\n    └── integration_test.rs\n</code></pre>\n<p>\n  Then we can create test in this folder and these tests may import <code>our_crate</code> as it will\n  do it's final user:\n</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> our_crate;\n\n<span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_1</span>() {\n    <span class=\"hljs-comment\">// test some functionality from `our_crate`</span>\n}\n</code></pre>\n<h2>References</h2>\n<ul>\n  <li><a href=\"https://doc.rust-lang.org/book/ch11-03-test-organization.html\">Rust testing documentation</a></li>\n</ul>\n"}},"__N_SSG":true}